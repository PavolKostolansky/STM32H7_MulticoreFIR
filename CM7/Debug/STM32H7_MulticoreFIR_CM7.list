
STM32H7_MulticoreFIR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008304  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800859c  0800859c  0001859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080085bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e0  20000014  080085d0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200001f4  080085d0  000201f4  2**0
                  ALLOC
  8 .non_cacheable 000000e4  38000000  080085d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .cacheable    000000b8  380000e4  080086b4  000300e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ee34  00000000  00000000  000301ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002ffd  00000000  00000000  0004effe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001370  00000000  00000000  00052000  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b6f8  00000000  00000000  00053370  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000116c3  00000000  00000000  0008ea68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001936b3  00000000  00000000  000a012b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002337de  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00001240  00000000  00000000  00233860  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  00005300  00000000  00000000  00234aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008584 	.word	0x08008584

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	08008584 	.word	0x08008584

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000410:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000414:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <SCB_EnableICache+0x3c>)
 800041a:	2200      	movs	r2, #0
 800041c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000424:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <SCB_EnableICache+0x3c>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <SCB_EnableICache+0x3c>)
 800042e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000432:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000434:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000438:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <SCB_EnableDCache+0x7c>)
 8000454:	2200      	movs	r2, #0
 8000456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800045a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <SCB_EnableDCache+0x7c>)
 8000460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000464:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	0b5b      	lsrs	r3, r3, #13
 800046a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800046e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000478:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	015a      	lsls	r2, r3, #5
 800047e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000482:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000484:	68ba      	ldr	r2, [r7, #8]
 8000486:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000488:	490f      	ldr	r1, [pc, #60]	; (80004c8 <SCB_EnableDCache+0x7c>)
 800048a:	4313      	orrs	r3, r2
 800048c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	1e5a      	subs	r2, r3, #1
 8000494:	60ba      	str	r2, [r7, #8]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1ef      	bne.n	800047a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	1e5a      	subs	r2, r3, #1
 800049e:	60fa      	str	r2, [r7, #12]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1e5      	bne.n	8000470 <SCB_EnableDCache+0x24>
 80004a4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <SCB_EnableDCache+0x7c>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <SCB_EnableDCache+0x7c>)
 80004ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80004de:	2320      	movs	r3, #32
 80004e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004e2:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80004e6:	e00b      	b.n	8000500 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80004e8:	4a0c      	ldr	r2, [pc, #48]	; (800051c <SCB_InvalidateDCache_by_Addr+0x50>)
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	4413      	add	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80004f8:	697a      	ldr	r2, [r7, #20]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	2b00      	cmp	r3, #0
 8000504:	dcf0      	bgt.n	80004e8 <SCB_InvalidateDCache_by_Addr+0x1c>
 8000506:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800050e:	bf00      	nop
 8000510:	371c      	adds	r7, #28
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8000520:	b480      	push	{r7}
 8000522:	b087      	sub	sp, #28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8000532:	2320      	movs	r3, #32
 8000534:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000536:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800053a:	e00b      	b.n	8000554 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 800053c:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <SCB_CleanDCache_by_Addr+0x50>)
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	4413      	add	r3, r2
 800054a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	2b00      	cmp	r3, #0
 8000558:	dcf0      	bgt.n	800053c <SCB_CleanDCache_by_Addr+0x1c>
 800055a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800055e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8000562:	bf00      	nop
 8000564:	371c      	adds	r7, #28
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_ADC_ConvCpltCallback>:
	//cache clean FIR_state_c0
	SCB_CleanDCache_by_Addr((uint32_t *)&(*FIR_filter.FIR_state_c0),sizeof(FIR_filter.FIR_state_c0));
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	SCB_InvalidateDCache_by_Addr((uint32_t *)&(*FIR_filter.FIR_state_c1),sizeof(FIR_filter.FIR_state_c1));
 800057c:	4b5d      	ldr	r3, [pc, #372]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffa2 	bl	80004cc <SCB_InvalidateDCache_by_Addr>
	if ( (READY_FOR_OUTPUT == *FIR_filter.FIR_state_c0) && (READY_FOR_OUTPUT == *FIR_filter.FIR_state_c1) )
 8000588:	4b5a      	ldr	r3, [pc, #360]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d125      	bne.n	80005de <HAL_ADC_ConvCpltCallback+0x6a>
 8000592:	4b58      	ldr	r3, [pc, #352]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d120      	bne.n	80005de <HAL_ADC_ConvCpltCallback+0x6a>
		SCB_InvalidateDCache_by_Addr((uint32_t *)&(FIR_filter.result_c1),sizeof(FIR_filter.result_c1));
 800059c:	2104      	movs	r1, #4
 800059e:	4856      	ldr	r0, [pc, #344]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x184>)
 80005a0:	f7ff ff94 	bl	80004cc <SCB_InvalidateDCache_by_Addr>
		sum = FIR_filter.result_c1 + FIR_filter.result_c0;
 80005a4:	4b53      	ldr	r3, [pc, #332]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 80005a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80005aa:	4b52      	ldr	r3, [pc, #328]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 80005ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80005b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005b4:	4b51      	ldr	r3, [pc, #324]	; (80006fc <HAL_ADC_ConvCpltCallback+0x188>)
 80005b6:	edc3 7a00 	vstr	s15, [r3]
		DAC1->DHR12R1 = ROUND_TO_12BIT(sum);
 80005ba:	4b50      	ldr	r3, [pc, #320]	; (80006fc <HAL_ADC_ConvCpltCallback+0x188>)
 80005bc:	ed93 7a00 	vldr	s14, [r3]
 80005c0:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8000700 <HAL_ADC_ConvCpltCallback+0x18c>
 80005c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005c8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000704 <HAL_ADC_ConvCpltCallback+0x190>
 80005cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d0:	4b4d      	ldr	r3, [pc, #308]	; (8000708 <HAL_ADC_ConvCpltCallback+0x194>)
 80005d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d6:	ee17 2a90 	vmov	r2, s15
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	e009      	b.n	80005f2 <HAL_ADC_ConvCpltCallback+0x7e>
		if(!startFlag)
 80005de:	4b4b      	ldr	r3, [pc, #300]	; (800070c <HAL_ADC_ConvCpltCallback+0x198>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d105      	bne.n	80005f2 <HAL_ADC_ConvCpltCallback+0x7e>
			startFlag++;
 80005e6:	4b49      	ldr	r3, [pc, #292]	; (800070c <HAL_ADC_ConvCpltCallback+0x198>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b47      	ldr	r3, [pc, #284]	; (800070c <HAL_ADC_ConvCpltCallback+0x198>)
 80005f0:	701a      	strb	r2, [r3, #0]
	FIR_filter.bufferCurrentPointer = adcInputArr;
 80005f2:	4b47      	ldr	r3, [pc, #284]	; (8000710 <HAL_ADC_ConvCpltCallback+0x19c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a3f      	ldr	r2, [pc, #252]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 80005f8:	6213      	str	r3, [r2, #32]
	SCB_InvalidateDCache_by_Addr((uint32_t*)ADC_DMA_ADDRESS,sizeof(uint32_t));
 80005fa:	2104      	movs	r1, #4
 80005fc:	4845      	ldr	r0, [pc, #276]	; (8000714 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80005fe:	f7ff ff65 	bl	80004cc <SCB_InvalidateDCache_by_Addr>
	SCB_CleanDCache_by_Addr((uint32_t *)&(FIR_filter.bufferCurrentPointer),sizeof(FIR_filter.bufferCurrentPointer));
 8000602:	2104      	movs	r1, #4
 8000604:	4844      	ldr	r0, [pc, #272]	; (8000718 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8000606:	f7ff ff8b 	bl	8000520 <SCB_CleanDCache_by_Addr>
	*adcInputArr = *(uint32_t*)ADC_DMA_ADDRESS;
 800060a:	4a42      	ldr	r2, [pc, #264]	; (8000714 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800060c:	4b40      	ldr	r3, [pc, #256]	; (8000710 <HAL_ADC_ConvCpltCallback+0x19c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6812      	ldr	r2, [r2, #0]
 8000612:	601a      	str	r2, [r3, #0]
	SCB_CleanDCache_by_Addr((adcInputArr),sizeof(adcInputArr));
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2104      	movs	r1, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff80 	bl	8000520 <SCB_CleanDCache_by_Addr>
	writeDAC();

	readDMABuffer();

	//trigger calculation on M4 core
	__SEV();
 8000620:	bf40      	sev
	if (!((uint32_t)(adcInputArr) % ADC_BUF_END_ADDRESS))
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	461a      	mov	r2, r3
 8000628:	0893      	lsrs	r3, r2, #2
 800062a:	493c      	ldr	r1, [pc, #240]	; (800071c <HAL_ADC_ConvCpltCallback+0x1a8>)
 800062c:	fba1 1303 	umull	r1, r3, r1, r3
 8000630:	0e9b      	lsrs	r3, r3, #26
 8000632:	493b      	ldr	r1, [pc, #236]	; (8000720 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000634:	fb01 f303 	mul.w	r3, r1, r3
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d104      	bne.n	8000648 <HAL_ADC_ConvCpltCallback+0xd4>
		adcInputArr = (uint32_t*)ADC_BUF_START_ADDRESS;
 800063e:	4b34      	ldr	r3, [pc, #208]	; (8000710 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000640:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	e004      	b.n	8000652 <HAL_ADC_ConvCpltCallback+0xde>
		adcInputArr++;
 8000648:	4b31      	ldr	r3, [pc, #196]	; (8000710 <HAL_ADC_ConvCpltCallback+0x19c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3304      	adds	r3, #4
 800064e:	4a30      	ldr	r2, [pc, #192]	; (8000710 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000650:	6013      	str	r3, [r2, #0]
	float result = 0;
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
	uint32_t * inputArr = FIR_filter.bufferCurrentPointer;
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	613b      	str	r3, [r7, #16]
	*FIR_filter.FIR_state_c0 = CALCULATION;
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 8000660:	691b      	ldr	r3, [r3, #16]
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < SPLITTER; i++)
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e02b      	b.n	80006c4 <HAL_ADC_ConvCpltCallback+0x150>
		extractor = (uint16_t *)inputArr;
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	60bb      	str	r3, [r7, #8]
		result += FIR_filter.FIR_coef[i] * (float)(*extractor);
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 8000672:	699a      	ldr	r2, [r3, #24]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4413      	add	r3, r2
 800067a:	ed93 7a00 	vldr	s14, [r3]
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	ee07 3a90 	vmov	s15, r3
 8000686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800068a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800068e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000696:	edc7 7a05 	vstr	s15, [r7, #20]
		if (!((uint32_t)(inputArr) % ADC_BUF_START_ADDRESS))
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	0ed3      	lsrs	r3, r2, #27
 800069e:	4921      	ldr	r1, [pc, #132]	; (8000724 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80006a0:	fba1 3103 	umull	r3, r1, r1, r3
 80006a4:	460b      	mov	r3, r1
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	1a5b      	subs	r3, r3, r1
 80006aa:	06db      	lsls	r3, r3, #27
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d102      	bne.n	80006b8 <HAL_ADC_ConvCpltCallback+0x144>
			inputArr = (uint32_t*)ADC_BUF_END_ADDRESS;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_ADC_ConvCpltCallback+0x1ac>)
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	e002      	b.n	80006be <HAL_ADC_ConvCpltCallback+0x14a>
			inputArr--;
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3b04      	subs	r3, #4
 80006bc:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < SPLITTER; i++)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3301      	adds	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b22      	cmp	r3, #34	; 0x22
 80006c8:	d9d0      	bls.n	800066c <HAL_ADC_ConvCpltCallback+0xf8>
	FIR_filter.result_c0 = result;
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	6093      	str	r3, [r2, #8]
	SCB_CleanDCache_by_Addr((uint32_t *)&(FIR_filter.result_c0),sizeof(FIR_filter.result_c0));
 80006d0:	2104      	movs	r1, #4
 80006d2:	4815      	ldr	r0, [pc, #84]	; (8000728 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80006d4:	f7ff ff24 	bl	8000520 <SCB_CleanDCache_by_Addr>
	*FIR_filter.FIR_state_c0 = READY_FOR_OUTPUT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t *)&(*FIR_filter.FIR_state_c0),sizeof(FIR_filter.FIR_state_c0));
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x180>)
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	2104      	movs	r1, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff1a 	bl	8000520 <SCB_CleanDCache_by_Addr>

	moveADCArrayPointer();

	calculateFIR();
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	380000bc 	.word	0x380000bc
 80006f8:	380000c8 	.word	0x380000c8
 80006fc:	20000030 	.word	0x20000030
 8000700:	477fff00 	.word	0x477fff00
 8000704:	457ff000 	.word	0x457ff000
 8000708:	40007400 	.word	0x40007400
 800070c:	20000034 	.word	0x20000034
 8000710:	20000008 	.word	0x20000008
 8000714:	38000400 	.word	0x38000400
 8000718:	380000dc 	.word	0x380000dc
 800071c:	4924915f 	.word	0x4924915f
 8000720:	380000b4 	.word	0x380000b4
 8000724:	25b6db6d 	.word	0x25b6db6d
 8000728:	380000c4 	.word	0x380000c4

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000732:	f7ff fe6b 	bl	800040c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000736:	f7ff fe89 	bl	800044c <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800073a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000740:	bf00      	nop
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <main+0xd0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800074a:	2b00      	cmp	r3, #0
 800074c:	d004      	beq.n	8000758 <main+0x2c>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dcf4      	bgt.n	8000742 <main+0x16>
  if ( timeout < 0 )
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	da01      	bge.n	8000762 <main+0x36>
  {
  Error_Handler();
 800075e:	f000 fadf 	bl	8000d20 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 fc7f 	bl	8001064 <HAL_Init>

  /* USER CODE BEGIN Init */
  SET_BIT(RCC->D3AMR, RCC_D3AMR_SRAM4AMEN);
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <main+0xd0>)
 8000768:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800076c:	4a23      	ldr	r2, [pc, #140]	; (80007fc <main+0xd0>)
 800076e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000772:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f84b 	bl	8000810 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <main+0xd0>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <main+0xd0>)
 8000782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <main+0xd0>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000798:	2000      	movs	r0, #0
 800079a:	f004 fcfd 	bl	8005198 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f004 fd13 	bl	80051cc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007aa:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007ac:	bf00      	nop
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <main+0xd0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d104      	bne.n	80007c4 <main+0x98>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	dcf4      	bgt.n	80007ae <main+0x82>
if ( timeout < 0 )
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	da01      	bge.n	80007ce <main+0xa2>
{
Error_Handler();
 80007ca:	f000 faa9 	bl	8000d20 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 fa1f 	bl	8000c10 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d2:	f000 f9f5 	bl	8000bc0 <MX_DMA_Init>
  MX_ADC1_Init();
 80007d6:	f000 f8f7 	bl	80009c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007da:	f000 f9a3 	bl	8000b24 <MX_TIM3_Init>
  MX_DAC1_Init();
 80007de:	f000 f96f 	bl	8000ac0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_DMA_ADDRESS, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <main+0xd4>)
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <main+0xd8>)
 80007e8:	f001 f884 	bl	80018f4 <HAL_ADC_Start_DMA>

  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80007ec:	2100      	movs	r1, #0
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <main+0xdc>)
 80007f0:	f002 f8ad 	bl	800294e <HAL_DAC_Start>

  HAL_TIM_Base_Start(&htim3);
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <main+0xe0>)
 80007f6:	f007 fbdb 	bl	8007fb0 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <main+0xce>
 80007fc:	58024400 	.word	0x58024400
 8000800:	38000400 	.word	0x38000400
 8000804:	20000114 	.word	0x20000114
 8000808:	20000038 	.word	0x20000038
 800080c:	200000c8 	.word	0x200000c8

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0cc      	sub	sp, #304	; 0x130
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800081a:	224c      	movs	r2, #76	; 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 fea8 	bl	8008574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000828:	2220      	movs	r2, #32
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f007 fea1 	bl	8008574 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	4618      	mov	r0, r3
 8000838:	23bc      	movs	r3, #188	; 0xbc
 800083a:	461a      	mov	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f007 fe99 	bl	8008574 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000842:	2004      	movs	r0, #4
 8000844:	f004 fcd6 	bl	80051f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	4b5b      	ldr	r3, [pc, #364]	; (80009bc <SystemClock_Config+0x1ac>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a5a      	ldr	r2, [pc, #360]	; (80009bc <SystemClock_Config+0x1ac>)
 8000854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b58      	ldr	r3, [pc, #352]	; (80009bc <SystemClock_Config+0x1ac>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4b56      	ldr	r3, [pc, #344]	; (80009c0 <SystemClock_Config+0x1b0>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	4a55      	ldr	r2, [pc, #340]	; (80009c0 <SystemClock_Config+0x1b0>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000872:	4b53      	ldr	r3, [pc, #332]	; (80009c0 <SystemClock_Config+0x1b0>)
 8000874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000876:	f003 0201 	and.w	r2, r3, #1
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000882:	bf00      	nop
 8000884:	4b4d      	ldr	r3, [pc, #308]	; (80009bc <SystemClock_Config+0x1ac>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800088c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000890:	d1f8      	bne.n	8000884 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <SystemClock_Config+0x1b4>)
 8000894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000896:	f023 0303 	bic.w	r3, r3, #3
 800089a:	4a4a      	ldr	r2, [pc, #296]	; (80009c4 <SystemClock_Config+0x1b4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a2:	2301      	movs	r3, #1
 80008a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b0:	2302      	movs	r3, #2
 80008b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008c2:	2378      	movs	r3, #120	; 0x78
 80008c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008da:	230c      	movs	r3, #12
 80008dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 fcd9 	bl	80052a8 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80008fc:	f000 fa10 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	233f      	movs	r3, #63	; 0x3f
 8000902:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2303      	movs	r3, #3
 8000908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000912:	2308      	movs	r3, #8
 8000914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000928:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000932:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000936:	2104      	movs	r1, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f005 f8c5 	bl	8005ac8 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000944:	f000 f9ec 	bl	8000d20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000950:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2201      	movs	r2, #1
 8000958:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	2212      	movs	r2, #18
 8000960:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2201      	movs	r2, #1
 8000968:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2202      	movs	r2, #2
 8000970:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2202      	movs	r2, #2
 8000978:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	22c0      	movs	r2, #192	; 0xc0
 8000980:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2220      	movs	r2, #32
 8000988:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000992:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	2200      	movs	r2, #0
 800099a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 fbe8 	bl	8006178 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x1a2>
  {
    Error_Handler();
 80009ae:	f000 f9b7 	bl	8000d20 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	58024800 	.word	0x58024800
 80009c0:	58000400 	.word	0x58000400
 80009c4:	58024400 	.word	0x58024400

080009c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <MX_ADC1_Init+0xec>)
 80009ee:	4a32      	ldr	r2, [pc, #200]	; (8000ab8 <MX_ADC1_Init+0xf0>)
 80009f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <MX_ADC1_Init+0xec>)
 80009f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <MX_ADC1_Init+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a26:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4e:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a50:	f000 fdb0 	bl	80015b4 <HAL_ADC_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000a5a:	f000 f961 	bl	8000d20 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a6a:	f001 fd65 	bl	8002538 <HAL_ADCEx_MultiModeConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a74:	f000 f954 	bl	8000d20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_ADC1_Init+0xf4>)
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7c:	2306      	movs	r3, #6
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MX_ADC1_Init+0xec>)
 8000a9c:	f001 f802 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000aa6:	f000 f93b 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000114 	.word	0x20000114
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	08600004 	.word	0x08600004

08000ac0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2224      	movs	r2, #36	; 0x24
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f007 fd51 	bl	8008574 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_DAC1_Init+0x5c>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_DAC1_Init+0x60>)
 8000ad6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_DAC1_Init+0x5c>)
 8000ada:	f001 ff16 	bl	800290a <HAL_DAC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ae4:	f000 f91c 	bl	8000d20 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000af4:	2301      	movs	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <MX_DAC1_Init+0x5c>)
 8000b04:	f001 ff76 	bl	80029f4 <HAL_DAC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 f907 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000038 	.word	0x20000038
 8000b20:	40007400 	.word	0x40007400

08000b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000b4a:	2218      	movs	r2, #24
 8000b4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000b56:	2231      	movs	r2, #49	; 0x31
 8000b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b66:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000b68:	f007 f9ca 	bl	8007f00 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 f8d5 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000b84:	f007 fa42 	bl	800800c <HAL_TIM_ConfigClockSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 f8c7 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b92:	2320      	movs	r3, #32
 8000b94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <MX_TIM3_Init+0x94>)
 8000ba0:	f007 fc3c 	bl	800841c <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000baa:	f000 f8b9 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000c8 	.word	0x200000c8
 8000bbc:	40000400 	.word	0x40000400

08000bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_DMA_Init+0x4c>)
 8000bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <MX_DMA_Init+0x4c>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <MX_DMA_Init+0x4c>)
 8000bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	200b      	movs	r0, #11
 8000bea:	f001 fe5a 	bl	80028a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bee:	200b      	movs	r0, #11
 8000bf0:	f001 fe71 	bl	80028d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	200c      	movs	r0, #12
 8000bfa:	f001 fe52 	bl	80028a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bfe:	200c      	movs	r0, #12
 8000c00:	f001 fe69 	bl	80028d6 <HAL_NVIC_EnableIRQ>

}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	58024400 	.word	0x58024400

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c44:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4815      	ldr	r0, [pc, #84]	; (8000d18 <MX_GPIO_Init+0x108>)
 8000cc2:	f004 fa4f 	bl	8005164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <MX_GPIO_Init+0x10c>)
 8000cce:	f004 fa49 	bl	8005164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <MX_GPIO_Init+0x108>)
 8000cea:	f004 f88b 	bl	8004e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_GPIO_Init+0x10c>)
 8000d08:	f004 f87c 	bl	8004e04 <HAL_GPIO_Init>

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	58020400 	.word	0x58020400

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x30>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x30>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	58024400 	.word	0x58024400

08000d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <HAL_ADC_MspInit+0xe0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d15a      	bne.n	8000e3c <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d86:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <HAL_ADC_MspInit+0xe4>)
 8000d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8c:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <HAL_ADC_MspInit+0xe4>)
 8000d8e:	f043 0320 	orr.w	r3, r3, #32
 8000d92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <HAL_ADC_MspInit+0xe4>)
 8000d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9c:	f003 0320 	and.w	r3, r3, #32
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_ADC_MspInit+0xe4>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <HAL_ADC_MspInit+0xe4>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_ADC_MspInit+0xe4>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481d      	ldr	r0, [pc, #116]	; (8000e4c <HAL_ADC_MspInit+0xe8>)
 8000dd8:	f004 f814 	bl	8004e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000de0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000de4:	2209      	movs	r2, #9
 8000de6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000e22:	f001 ff17 	bl	8002c54 <HAL_DMA_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8000e2c:	f7ff ff78 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000e34:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e36:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40022000 	.word	0x40022000
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58021400 	.word	0x58021400
 8000e50:	20000178 	.word	0x20000178
 8000e54:	40020010 	.word	0x40020010

08000e58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a2f      	ldr	r2, [pc, #188]	; (8000f34 <HAL_DAC_MspInit+0xdc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d158      	bne.n	8000f2c <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <HAL_DAC_MspInit+0xe0>)
 8000e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e80:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <HAL_DAC_MspInit+0xe0>)
 8000e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_DAC_MspInit+0xe0>)
 8000e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <HAL_DAC_MspInit+0xe0>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <HAL_DAC_MspInit+0xe0>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <HAL_DAC_MspInit+0xe0>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481c      	ldr	r0, [pc, #112]	; (8000f3c <HAL_DAC_MspInit+0xe4>)
 8000eca:	f003 ff9b 	bl	8004e04 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_DAC_MspInit+0xec>)
 8000ed2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000ed6:	2243      	movs	r2, #67	; 0x43
 8000ed8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000edc:	2240      	movs	r2, #64	; 0x40
 8000ede:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eec:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000ef8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000f12:	f001 fe9f 	bl	8002c54 <HAL_DMA_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000f1c:	f7ff ff00 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_DAC_MspInit+0xe8>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40007400 	.word	0x40007400
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020000 	.word	0x58020000
 8000f40:	20000050 	.word	0x20000050
 8000f44:	40020028 	.word	0x40020028

08000f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_TIM_Base_MspInit+0x3c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10e      	bne.n	8000f78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_TIM_Base_MspInit+0x40>)
 8000f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f60:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_TIM_Base_MspInit+0x40>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_TIM_Base_MspInit+0x40>)
 8000f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40000400 	.word	0x40000400
 8000f88:	58024400 	.word	0x58024400

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f8b2 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <DMA1_Stream0_IRQHandler+0x10>)
 8000fee:	f002 fbf7 	bl	80037e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000178 	.word	0x20000178

08000ffc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <DMA1_Stream1_IRQHandler+0x10>)
 8001002:	f002 fbed 	bl	80037e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000050 	.word	0x20000050

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001014:	f7ff f960 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001018:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800101a:	e003      	b.n	8001024 <LoopCopyDataInit>

0800101c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800101e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001020:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001022:	3104      	adds	r1, #4

08001024 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001028:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800102c:	d3f6      	bcc.n	800101c <CopyDataInit>
  ldr  r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001030:	e002      	b.n	8001038 <LoopFillZerobss>

08001032 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001032:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001034:	f842 3b04 	str.w	r3, [r2], #4

08001038 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800103a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800103c:	d3f9      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f007 fa75 	bl	800852c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fb73 	bl	800072c <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800104c:	080085bc 	.word	0x080085bc
  ldr  r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001054:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001058:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800105c:	200001f4 	.word	0x200001f4

08001060 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC3_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f001 fc0e 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001070:	f004 fee0 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8001074:	4601      	mov	r1, r0
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <HAL_Init+0x6c>)
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	f003 031f 	and.w	r3, r3, #31
 8001088:	fa21 f303 	lsr.w	r3, r1, r3
 800108c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_Init+0x68>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_Init+0x6c>)
 8001098:	5cd3      	ldrb	r3, [r2, r3]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_Init+0x70>)
 80010a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_Init+0x74>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f814 	bl	80010dc <HAL_InitTick>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e002      	b.n	80010c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010be:	f7ff fe37 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024400 	.word	0x58024400
 80010d0:	0800859c 	.word	0x0800859c
 80010d4:	20000004 	.word	0x20000004
 80010d8:	20000000 	.word	0x20000000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_InitTick+0x60>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e021      	b.n	8001134 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_InitTick+0x64>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_InitTick+0x60>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f001 fbf3 	bl	80028f2 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f001 fbbd 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_InitTick+0x68>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000010 	.word	0x20000010
 8001140:	20000000 	.word	0x20000000
 8001144:	2000000c 	.word	0x2000000c

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000010 	.word	0x20000010
 800116c:	200001f0 	.word	0x200001f0

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200001f0 	.word	0x200001f0

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_Delay+0x40>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000010 	.word	0x20000010

080011cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetREVID+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	0c1b      	lsrs	r3, r3, #16
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	5c001000 	.word	0x5c001000

080011e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	609a      	str	r2, [r3, #8]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3360      	adds	r3, #96	; 0x60
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	430b      	orrs	r3, r1
 800127a:	431a      	orrs	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	611a      	str	r2, [r3, #16]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012be:	b480      	push	{r7}
 80012c0:	b087      	sub	sp, #28
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3360      	adds	r3, #96	; 0x60
 80012ce:	461a      	mov	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	601a      	str	r2, [r3, #0]
  }
}
 80012e8:	bf00      	nop
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800131a:	b480      	push	{r7}
 800131c:	b087      	sub	sp, #28
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3330      	adds	r3, #48	; 0x30
 800132a:	461a      	mov	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	4413      	add	r3, r2
 8001338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	211f      	movs	r1, #31
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	401a      	ands	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0e9b      	lsrs	r3, r3, #26
 8001352:	f003 011f 	and.w	r1, r3, #31
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	431a      	orrs	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f023 0203 	bic.w	r2, r3, #3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3314      	adds	r3, #20
 80013a8:	461a      	mov	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	0e5b      	lsrs	r3, r3, #25
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	0d1b      	lsrs	r3, r3, #20
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	2107      	movs	r1, #7
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	0d1b      	lsrs	r3, r3, #20
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	431a      	orrs	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001408:	43db      	mvns	r3, r3
 800140a:	401a      	ands	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0318 	and.w	r3, r3, #24
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001414:	40d9      	lsrs	r1, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	400b      	ands	r3, r1
 800141a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800141e:	431a      	orrs	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	000fffff 	.word	0x000fffff

08001438 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 031f 	and.w	r3, r3, #31
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001462:	4013      	ands	r3, r2
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6093      	str	r3, [r2, #8]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	5fffffc0 	.word	0x5fffffc0

08001478 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800148c:	d101      	bne.n	8001492 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	6fffffc0 	.word	0x6fffffc0

080014c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014dc:	d101      	bne.n	80014e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <LL_ADC_Enable+0x24>)
 80014fe:	4013      	ands	r3, r2
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	7fffffc0 	.word	0x7fffffc0

08001518 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <LL_ADC_IsEnabled+0x18>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <LL_ADC_IsEnabled+0x1a>
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <LL_ADC_REG_StartConversion+0x24>)
 800154e:	4013      	ands	r3, r2
 8001550:	f043 0204 	orr.w	r2, r3, #4
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	7fffffc0 	.word	0x7fffffc0

08001568 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b04      	cmp	r3, #4
 800157a:	d101      	bne.n	8001580 <LL_ADC_REG_IsConversionOngoing+0x18>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d101      	bne.n	80015a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e18e      	b.n	80018ec <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fbc1 	bl	8000d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff3f 	bl	8001478 <LL_ADC_IsDeepPowerDownEnabled>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff25 	bl	8001454 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff5a 	bl	80014c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d113      	bne.n	8001642 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff3e 	bl	80014a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001624:	4b9a      	ldr	r3, [pc, #616]	; (8001890 <HAL_ADC_Init+0x2dc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	4a9a      	ldr	r2, [pc, #616]	; (8001894 <HAL_ADC_Init+0x2e0>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001634:	e002      	b.n	800163c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff3e 	bl	80014c8 <LL_ADC_IsInternalRegulatorEnabled>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f043 0210 	orr.w	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	f043 0201 	orr.w	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff78 	bl	8001568 <LL_ADC_REG_IsConversionOngoing>
 8001678:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8129 	bne.w	80018da <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 8125 	bne.w	80018da <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001698:	f043 0202 	orr.w	r2, r3, #2
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff37 	bl	8001518 <LL_ADC_IsEnabled>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d136      	bne.n	800171e <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a78      	ldr	r2, [pc, #480]	; (8001898 <HAL_ADC_Init+0x2e4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d004      	beq.n	80016c4 <HAL_ADC_Init+0x110>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a77      	ldr	r2, [pc, #476]	; (800189c <HAL_ADC_Init+0x2e8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d10e      	bne.n	80016e2 <HAL_ADC_Init+0x12e>
 80016c4:	4874      	ldr	r0, [pc, #464]	; (8001898 <HAL_ADC_Init+0x2e4>)
 80016c6:	f7ff ff27 	bl	8001518 <LL_ADC_IsEnabled>
 80016ca:	4604      	mov	r4, r0
 80016cc:	4873      	ldr	r0, [pc, #460]	; (800189c <HAL_ADC_Init+0x2e8>)
 80016ce:	f7ff ff23 	bl	8001518 <LL_ADC_IsEnabled>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4323      	orrs	r3, r4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf0c      	ite	eq
 80016da:	2301      	moveq	r3, #1
 80016dc:	2300      	movne	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	e008      	b.n	80016f4 <HAL_ADC_Init+0x140>
 80016e2:	486f      	ldr	r0, [pc, #444]	; (80018a0 <HAL_ADC_Init+0x2ec>)
 80016e4:	f7ff ff18 	bl	8001518 <LL_ADC_IsEnabled>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf0c      	ite	eq
 80016ee:	2301      	moveq	r3, #1
 80016f0:	2300      	movne	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d012      	beq.n	800171e <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a66      	ldr	r2, [pc, #408]	; (8001898 <HAL_ADC_Init+0x2e4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_ADC_Init+0x158>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a65      	ldr	r2, [pc, #404]	; (800189c <HAL_ADC_Init+0x2e8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_ADC_Init+0x15c>
 800170c:	4a65      	ldr	r2, [pc, #404]	; (80018a4 <HAL_ADC_Init+0x2f0>)
 800170e:	e000      	b.n	8001712 <HAL_ADC_Init+0x15e>
 8001710:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <HAL_ADC_Init+0x2f4>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4619      	mov	r1, r3
 8001718:	4610      	mov	r0, r2
 800171a:	f7ff fd63 	bl	80011e4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800171e:	f7ff fd55 	bl	80011cc <HAL_GetREVID>
 8001722:	4602      	mov	r2, r0
 8001724:	f241 0303 	movw	r3, #4099	; 0x1003
 8001728:	429a      	cmp	r2, r3
 800172a:	d914      	bls.n	8001756 <HAL_ADC_Init+0x1a2>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b10      	cmp	r3, #16
 8001732:	d110      	bne.n	8001756 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7d5b      	ldrb	r3, [r3, #21]
 8001738:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800173e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001744:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7f1b      	ldrb	r3, [r3, #28]
 800174a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800174c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800174e:	f043 030c 	orr.w	r3, r3, #12
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	e00d      	b.n	8001772 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7d5b      	ldrb	r3, [r3, #21]
 800175a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001760:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001766:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7f1b      	ldrb	r3, [r3, #28]
 800176c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7f1b      	ldrb	r3, [r3, #28]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d106      	bne.n	8001788 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	3b01      	subs	r3, #1
 8001780:	045b      	lsls	r3, r3, #17
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_ADC_Init+0x2f8>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fed3 	bl	8001568 <LL_ADC_REG_IsConversionOngoing>
 80017c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fee0 	bl	800158e <LL_ADC_INJ_IsConversionOngoing>
 80017ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d14a      	bne.n	800186c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d147      	bne.n	800186c <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7d1b      	ldrb	r3, [r3, #20]
 80017e0:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_ADC_Init+0x2fc>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	69b9      	ldr	r1, [r7, #24]
 80017fa:	430b      	orrs	r3, r1
 80017fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001804:	2b01      	cmp	r3, #1
 8001806:	d11b      	bne.n	8001840 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <HAL_ADC_Init+0x300>)
 8001816:	4013      	ands	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800181c:	3a01      	subs	r2, #1
 800181e:	0411      	lsls	r1, r2, #16
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001830:	430a      	orrs	r2, r1
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	e007      	b.n	8001850 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fd48 	bl	80022fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d121      	bne.n	80018b8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f023 010f 	bic.w	r1, r3, #15
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	1e5a      	subs	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
 800188c:	e01c      	b.n	80018c8 <HAL_ADC_Init+0x314>
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	053e2d63 	.word	0x053e2d63
 8001898:	40022000 	.word	0x40022000
 800189c:	40022100 	.word	0x40022100
 80018a0:	58026000 	.word	0x58026000
 80018a4:	40022300 	.word	0x40022300
 80018a8:	58026300 	.word	0x58026300
 80018ac:	fff0c003 	.word	0xfff0c003
 80018b0:	ffffbffc 	.word	0xffffbffc
 80018b4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 020f 	bic.w	r2, r2, #15
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018cc:	f023 0303 	bic.w	r3, r3, #3
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
 80018d8:	e007      	b.n	80018ea <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	f043 0210 	orr.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3724      	adds	r7, #36	; 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}

080018f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a55      	ldr	r2, [pc, #340]	; (8001a5c <HAL_ADC_Start_DMA+0x168>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_ADC_Start_DMA+0x20>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a54      	ldr	r2, [pc, #336]	; (8001a60 <HAL_ADC_Start_DMA+0x16c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_ADC_Start_DMA+0x24>
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_ADC_Start_DMA+0x170>)
 8001916:	e000      	b.n	800191a <HAL_ADC_Start_DMA+0x26>
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_ADC_Start_DMA+0x174>)
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fd8c 	bl	8001438 <LL_ADC_GetMultimode>
 8001920:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe1e 	bl	8001568 <LL_ADC_REG_IsConversionOngoing>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 808c 	bne.w	8001a4c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start_DMA+0x4e>
 800193e:	2302      	movs	r3, #2
 8001940:	e087      	b.n	8001a52 <HAL_ADC_Start_DMA+0x15e>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b05      	cmp	r3, #5
 8001954:	d002      	beq.n	800195c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d170      	bne.n	8001a3e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fbb5 	bl	80020cc <ADC_Enable>
 8001962:	4603      	mov	r3, r0
 8001964:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d163      	bne.n	8001a34 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001970:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <HAL_ADC_Start_DMA+0x178>)
 8001972:	4013      	ands	r3, r2
 8001974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a37      	ldr	r2, [pc, #220]	; (8001a60 <HAL_ADC_Start_DMA+0x16c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d002      	beq.n	800198c <HAL_ADC_Start_DMA+0x98>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	e000      	b.n	800198e <HAL_ADC_Start_DMA+0x9a>
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_ADC_Start_DMA+0x168>)
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	4293      	cmp	r3, r2
 8001994:	d002      	beq.n	800199c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	f023 0206 	bic.w	r2, r3, #6
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	659a      	str	r2, [r3, #88]	; 0x58
 80019c0:	e002      	b.n	80019c8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_ADC_Start_DMA+0x17c>)
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_ADC_Start_DMA+0x180>)
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <HAL_ADC_Start_DMA+0x184>)
 80019de:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	221c      	movs	r2, #28
 80019e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0210 	orr.w	r2, r2, #16
 80019fe:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f7ff fcb1 	bl	8001372 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3340      	adds	r3, #64	; 0x40
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f001 fc74 	bl	800330c <HAL_DMA_Start_IT>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fd87 	bl	8001540 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a32:	e00d      	b.n	8001a50 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001a3c:	e008      	b.n	8001a50 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a4a:	e001      	b.n	8001a50 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	40022100 	.word	0x40022100
 8001a64:	40022300 	.word	0x40022300
 8001a68:	58026300 	.word	0x58026300
 8001a6c:	fffff0fe 	.word	0xfffff0fe
 8001a70:	080021d5 	.word	0x080021d5
 8001a74:	080022ad 	.word	0x080022ad
 8001a78:	080022c9 	.word	0x080022c9

08001a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b099      	sub	sp, #100	; 0x64
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4a99      	ldr	r2, [pc, #612]	; (8001d24 <HAL_ADC_ConfigChannel+0x280>)
 8001abe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x2a>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e2e6      	b.n	800209c <HAL_ADC_ConfigChannel+0x5f8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fd44 	bl	8001568 <LL_ADC_REG_IsConversionOngoing>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 82cb 	bne.w	800207e <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d108      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x62>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0e9b      	lsrs	r3, r3, #26
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2201      	movs	r2, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	e00f      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x82>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2201      	movs	r2, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	69d1      	ldr	r1, [r2, #28]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f7ff fbea 	bl	800131a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fd0c 	bl	8001568 <LL_ADC_REG_IsConversionOngoing>
 8001b50:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd19 	bl	800158e <LL_ADC_INJ_IsConversionOngoing>
 8001b5c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f040 80b3 	bne.w	8001ccc <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 80af 	bne.w	8001ccc <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f7ff fc0c 	bl	8001398 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b80:	4b69      	ldr	r3, [pc, #420]	; (8001d28 <HAL_ADC_ConfigChannel+0x284>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x102>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	e01d      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x13e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10b      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x128>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	e00a      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x13e>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d027      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6919      	ldr	r1, [r3, #16]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bfa:	f7ff fb27 	bl	800124c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	7e5b      	ldrb	r3, [r3, #25]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x170>
 8001c0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c12:	e000      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x172>
 8001c14:	2300      	movs	r3, #0
 8001c16:	461a      	mov	r2, r3
 8001c18:	f7ff fb51 	bl	80012be <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6919      	ldr	r1, [r3, #16]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	7e1b      	ldrb	r3, [r3, #24]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d102      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x18e>
 8001c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c30:	e000      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x190>
 8001c32:	2300      	movs	r3, #0
 8001c34:	461a      	mov	r2, r3
 8001c36:	f7ff fb29 	bl	800128c <LL_ADC_SetDataRightShift>
 8001c3a:	e047      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	069b      	lsls	r3, r3, #26
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d107      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c5e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	069b      	lsls	r3, r3, #26
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d107      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c82:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	069b      	lsls	r3, r3, #26
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d107      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ca6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	069b      	lsls	r3, r3, #26
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d107      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fc21 	bl	8001518 <LL_ADC_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 81d9 	bne.w	8002090 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	461a      	mov	r2, r3
 8001cec:	f7ff fb80 	bl	80013f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_ADC_ConfigChannel+0x280>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f040 8101 	bne.w	8001efe <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10f      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x288>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	3301      	adds	r3, #1
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	bf94      	ite	ls
 8001d1c:	2301      	movls	r3, #1
 8001d1e:	2300      	movhi	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e016      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x2ae>
 8001d24:	47ff0000 	.word	0x47ff0000
 8001d28:	5c001000 	.word	0x5c001000
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	bf94      	ite	ls
 8001d4c:	2301      	movls	r3, #1
 8001d4e:	2300      	movhi	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d064      	beq.n	8001e20 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x2ce>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	3301      	adds	r3, #1
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d70:	e00e      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x2ec>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	069b      	lsls	r3, r3, #26
 8001d8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x30c>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	3301      	adds	r3, #1
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	e010      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x32e>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	ea42 0103 	orr.w	r1, r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10a      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x354>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 021f 	and.w	r2, r3, #31
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	051b      	lsls	r3, r3, #20
 8001df6:	e011      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x378>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	e069      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x398>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	069b      	lsls	r3, r3, #26
 8001e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3a:	e00e      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x3b6>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	61fb      	str	r3, [r7, #28]
  return result;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	069b      	lsls	r3, r3, #26
 8001e56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x3d6>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	e010      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x3f8>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	617b      	str	r3, [r7, #20]
  return result;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10d      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x424>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b1e      	subs	r3, #30
 8001ec0:	051b      	lsls	r3, r3, #20
 8001ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	e014      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x44e>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	60fb      	str	r3, [r7, #12]
  return result;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b1e      	subs	r3, #30
 8001eec:	051b      	lsls	r3, r3, #20
 8001eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	6892      	ldr	r2, [r2, #8]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7ff fa4d 	bl	8001398 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f280 80c4 	bge.w	8002090 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a65      	ldr	r2, [pc, #404]	; (80020a4 <HAL_ADC_ConfigChannel+0x600>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0x478>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a64      	ldr	r2, [pc, #400]	; (80020a8 <HAL_ADC_ConfigChannel+0x604>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x47c>
 8001f1c:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_ADC_ConfigChannel+0x608>)
 8001f1e:	e000      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x47e>
 8001f20:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_ADC_ConfigChannel+0x60c>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f984 	bl	8001230 <LL_ADC_GetCommonPathInternalCh>
 8001f28:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5d      	ldr	r2, [pc, #372]	; (80020a4 <HAL_ADC_ConfigChannel+0x600>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x49a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5b      	ldr	r2, [pc, #364]	; (80020a8 <HAL_ADC_ConfigChannel+0x604>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10e      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x4b8>
 8001f3e:	4859      	ldr	r0, [pc, #356]	; (80020a4 <HAL_ADC_ConfigChannel+0x600>)
 8001f40:	f7ff faea 	bl	8001518 <LL_ADC_IsEnabled>
 8001f44:	4604      	mov	r4, r0
 8001f46:	4858      	ldr	r0, [pc, #352]	; (80020a8 <HAL_ADC_ConfigChannel+0x604>)
 8001f48:	f7ff fae6 	bl	8001518 <LL_ADC_IsEnabled>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4323      	orrs	r3, r4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	e008      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x4ca>
 8001f5c:	4855      	ldr	r0, [pc, #340]	; (80020b4 <HAL_ADC_ConfigChannel+0x610>)
 8001f5e:	f7ff fadb 	bl	8001518 <LL_ADC_IsEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d07b      	beq.n	800206a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a50      	ldr	r2, [pc, #320]	; (80020b8 <HAL_ADC_ConfigChannel+0x614>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d12e      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x536>
 8001f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d129      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <HAL_ADC_ConfigChannel+0x610>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d17f      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a43      	ldr	r2, [pc, #268]	; (80020a4 <HAL_ADC_ConfigChannel+0x600>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x500>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <HAL_ADC_ConfigChannel+0x604>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x504>
 8001fa4:	4a41      	ldr	r2, [pc, #260]	; (80020ac <HAL_ADC_ConfigChannel+0x608>)
 8001fa6:	e000      	b.n	8001faa <HAL_ADC_ConfigChannel+0x506>
 8001fa8:	4a41      	ldr	r2, [pc, #260]	; (80020b0 <HAL_ADC_ConfigChannel+0x60c>)
 8001faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f7ff f929 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_ADC_ConfigChannel+0x618>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <HAL_ADC_ConfigChannel+0x61c>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001fca:	e002      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd8:	e05a      	b.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a39      	ldr	r2, [pc, #228]	; (80020c4 <HAL_ADC_ConfigChannel+0x620>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d11e      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x57e>
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d119      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <HAL_ADC_ConfigChannel+0x610>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d14b      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <HAL_ADC_ConfigChannel+0x600>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_ADC_ConfigChannel+0x568>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <HAL_ADC_ConfigChannel+0x604>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x56c>
 800200c:	4a27      	ldr	r2, [pc, #156]	; (80020ac <HAL_ADC_ConfigChannel+0x608>)
 800200e:	e000      	b.n	8002012 <HAL_ADC_ConfigChannel+0x56e>
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_ADC_ConfigChannel+0x60c>)
 8002012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002018:	4619      	mov	r1, r3
 800201a:	4610      	mov	r0, r2
 800201c:	f7ff f8f5 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002020:	e036      	b.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <HAL_ADC_ConfigChannel+0x624>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d131      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
 800202c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d12c      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_ADC_ConfigChannel+0x610>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d127      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <HAL_ADC_ConfigChannel+0x600>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_ADC_ConfigChannel+0x5b0>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_ADC_ConfigChannel+0x604>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x5b4>
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <HAL_ADC_ConfigChannel+0x608>)
 8002056:	e000      	b.n	800205a <HAL_ADC_ConfigChannel+0x5b6>
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <HAL_ADC_ConfigChannel+0x60c>)
 800205a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7ff f8d1 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
 8002068:	e012      	b.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800207c:	e008      	b.n	8002090 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0220 	orr.w	r2, r3, #32
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800209c:	4618      	mov	r0, r3
 800209e:	3764      	adds	r7, #100	; 0x64
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd90      	pop	{r4, r7, pc}
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40022100 	.word	0x40022100
 80020ac:	40022300 	.word	0x40022300
 80020b0:	58026300 	.word	0x58026300
 80020b4:	58026000 	.word	0x58026000
 80020b8:	cb840000 	.word	0xcb840000
 80020bc:	20000000 	.word	0x20000000
 80020c0:	053e2d63 	.word	0x053e2d63
 80020c4:	c7520000 	.word	0xc7520000
 80020c8:	cfb80000 	.word	0xcfb80000

080020cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fa1d 	bl	8001518 <LL_ADC_IsEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d167      	bne.n	80021b4 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <ADC_Enable+0xf4>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f043 0210 	orr.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e053      	b.n	80021b6 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f9ec 	bl	80014f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002118:	f7ff f82a 	bl	8001170 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <ADC_Enable+0xf8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d004      	beq.n	8002132 <ADC_Enable+0x66>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <ADC_Enable+0xfc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <ADC_Enable+0x6a>
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <ADC_Enable+0x100>)
 8002134:	e000      	b.n	8002138 <ADC_Enable+0x6c>
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <ADC_Enable+0x104>)
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff f97d 	bl	8001438 <LL_ADC_GetMultimode>
 800213e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a20      	ldr	r2, [pc, #128]	; (80021c8 <ADC_Enable+0xfc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d002      	beq.n	8002150 <ADC_Enable+0x84>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e000      	b.n	8002152 <ADC_Enable+0x86>
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <ADC_Enable+0xf8>)
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4293      	cmp	r3, r2
 8002158:	d025      	beq.n	80021a6 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d129      	bne.n	80021b4 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002160:	e021      	b.n	80021a6 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f9d6 	bl	8001518 <LL_ADC_IsEnabled>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d104      	bne.n	800217c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f9ba 	bl	80014f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800217c:	f7fe fff8 	bl	8001170 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d90d      	bls.n	80021a6 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f043 0210 	orr.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e007      	b.n	80021b6 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d1d6      	bne.n	8002162 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	8000003f 	.word	0x8000003f
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40022100 	.word	0x40022100
 80021cc:	40022300 	.word	0x40022300
 80021d0:	58026300 	.word	0x58026300

080021d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d14b      	bne.n	8002286 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d021      	beq.n	800224c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f871 	bl	80012f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d032      	beq.n	800227e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d12b      	bne.n	800227e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11f      	bne.n	800227e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
 800224a:	e018      	b.n	800227e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d111      	bne.n	800227e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7fe f978 	bl	8000574 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002284:	e00e      	b.n	80022a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff fbfc 	bl	8001a90 <HAL_ADC_ErrorCallback>
}
 8002298:	e004      	b.n	80022a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff fbde 	bl	8001a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff fbce 	bl	8001a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a70      	ldr	r2, [pc, #448]	; (80024cc <ADC_ConfigureBoostMode+0x1d0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <ADC_ConfigureBoostMode+0x1c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6f      	ldr	r2, [pc, #444]	; (80024d0 <ADC_ConfigureBoostMode+0x1d4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d109      	bne.n	800232c <ADC_ConfigureBoostMode+0x30>
 8002318:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <ADC_ConfigureBoostMode+0x1d8>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e008      	b.n	800233e <ADC_ConfigureBoostMode+0x42>
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <ADC_ConfigureBoostMode+0x1dc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01a      	beq.n	8002378 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002342:	f003 fee9 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 8002346:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002350:	d006      	beq.n	8002360 <ADC_ConfigureBoostMode+0x64>
 8002352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002356:	d00b      	beq.n	8002370 <ADC_ConfigureBoostMode+0x74>
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d000      	beq.n	8002360 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800235e:	e05d      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	60fb      	str	r3, [r7, #12]
        break;
 800236e:	e055      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	60fb      	str	r3, [r7, #12]
        break;
 8002376:	e051      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002378:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800237c:	f004 fdea 	bl	8006f54 <HAL_RCCEx_GetPeriphCLKFreq>
 8002380:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800238a:	d02a      	beq.n	80023e2 <ADC_ConfigureBoostMode+0xe6>
 800238c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002390:	d813      	bhi.n	80023ba <ADC_ConfigureBoostMode+0xbe>
 8002392:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002396:	d024      	beq.n	80023e2 <ADC_ConfigureBoostMode+0xe6>
 8002398:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800239c:	d806      	bhi.n	80023ac <ADC_ConfigureBoostMode+0xb0>
 800239e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023a2:	d01e      	beq.n	80023e2 <ADC_ConfigureBoostMode+0xe6>
 80023a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023a8:	d01b      	beq.n	80023e2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80023aa:	e037      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80023ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b0:	d017      	beq.n	80023e2 <ADC_ConfigureBoostMode+0xe6>
 80023b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80023b6:	d014      	beq.n	80023e2 <ADC_ConfigureBoostMode+0xe6>
        break;
 80023b8:	e030      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80023ba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023be:	d021      	beq.n	8002404 <ADC_ConfigureBoostMode+0x108>
 80023c0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023c4:	d806      	bhi.n	80023d4 <ADC_ConfigureBoostMode+0xd8>
 80023c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80023ca:	d013      	beq.n	80023f4 <ADC_ConfigureBoostMode+0xf8>
 80023cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023d0:	d014      	beq.n	80023fc <ADC_ConfigureBoostMode+0x100>
        break;
 80023d2:	e023      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80023d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023d8:	d018      	beq.n	800240c <ADC_ConfigureBoostMode+0x110>
 80023da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80023de:	d019      	beq.n	8002414 <ADC_ConfigureBoostMode+0x118>
        break;
 80023e0:	e01c      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c9b      	lsrs	r3, r3, #18
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	60fb      	str	r3, [r7, #12]
        break;
 80023f2:	e013      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	60fb      	str	r3, [r7, #12]
        break;
 80023fa:	e00f      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	60fb      	str	r3, [r7, #12]
        break;
 8002402:	e00b      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	60fb      	str	r3, [r7, #12]
        break;
 800240a:	e007      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	09db      	lsrs	r3, r3, #7
 8002410:	60fb      	str	r3, [r7, #12]
        break;
 8002412:	e003      	b.n	800241c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	60fb      	str	r3, [r7, #12]
        break;
 800241a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800241c:	f7fe fed6 	bl	80011cc <HAL_GetREVID>
 8002420:	4602      	mov	r2, r0
 8002422:	f241 0303 	movw	r3, #4099	; 0x1003
 8002426:	429a      	cmp	r2, r3
 8002428:	d815      	bhi.n	8002456 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a2b      	ldr	r2, [pc, #172]	; (80024dc <ADC_ConfigureBoostMode+0x1e0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d908      	bls.n	8002444 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002440:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002442:	e03e      	b.n	80024c2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002452:	609a      	str	r2, [r3, #8]
}
 8002454:	e035      	b.n	80024c2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <ADC_ConfigureBoostMode+0x1e4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d808      	bhi.n	8002476 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	e025      	b.n	80024c2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <ADC_ConfigureBoostMode+0x1e8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d80a      	bhi.n	8002494 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	e016      	b.n	80024c2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <ADC_ConfigureBoostMode+0x1ec>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d80a      	bhi.n	80024b2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	609a      	str	r2, [r3, #8]
}
 80024b0:	e007      	b.n	80024c2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80024c0:	609a      	str	r2, [r3, #8]
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40022100 	.word	0x40022100
 80024d4:	40022300 	.word	0x40022300
 80024d8:	58026300 	.word	0x58026300
 80024dc:	01312d00 	.word	0x01312d00
 80024e0:	005f5e10 	.word	0x005f5e10
 80024e4:	00bebc20 	.word	0x00bebc20
 80024e8:	017d7840 	.word	0x017d7840

080024ec <LL_ADC_IsEnabled>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <LL_ADC_IsEnabled+0x18>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <LL_ADC_IsEnabled+0x1a>
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_ADC_REG_IsConversionOngoing>:
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d101      	bne.n	800252a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b09f      	sub	sp, #124	; 0x7c
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002552:	2302      	movs	r3, #2
 8002554:	e0ba      	b.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a5c      	ldr	r2, [pc, #368]	; (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d102      	bne.n	800256e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002568:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	e001      	b.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e09d      	b.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ffbd 	bl	8002512 <LL_ADC_REG_IsConversionOngoing>
 8002598:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ffb7 	bl	8002512 <LL_ADC_REG_IsConversionOngoing>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d17f      	bne.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d17c      	bne.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a47      	ldr	r2, [pc, #284]	; (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a46      	ldr	r2, [pc, #280]	; (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80025c4:	4b45      	ldr	r3, [pc, #276]	; (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80025c6:	e000      	b.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80025c8:	4b45      	ldr	r3, [pc, #276]	; (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80025ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d039      	beq.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	431a      	orrs	r2, r3
 80025e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a3a      	ldr	r2, [pc, #232]	; (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a38      	ldr	r2, [pc, #224]	; (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10e      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80025fa:	4836      	ldr	r0, [pc, #216]	; (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80025fc:	f7ff ff76 	bl	80024ec <LL_ADC_IsEnabled>
 8002600:	4604      	mov	r4, r0
 8002602:	4835      	ldr	r0, [pc, #212]	; (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002604:	f7ff ff72 	bl	80024ec <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	4323      	orrs	r3, r4
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e008      	b.n	800262a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002618:	4832      	ldr	r0, [pc, #200]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800261a:	f7ff ff67 	bl	80024ec <LL_ADC_IsEnabled>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d047      	beq.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800262e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002634:	4013      	ands	r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6811      	ldr	r1, [r2, #0]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	6892      	ldr	r2, [r2, #8]
 800263e:	430a      	orrs	r2, r1
 8002640:	431a      	orrs	r2, r3
 8002642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002644:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002646:	e03a      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002652:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10e      	bne.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002668:	481a      	ldr	r0, [pc, #104]	; (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800266a:	f7ff ff3f 	bl	80024ec <LL_ADC_IsEnabled>
 800266e:	4604      	mov	r4, r0
 8002670:	4819      	ldr	r0, [pc, #100]	; (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002672:	f7ff ff3b 	bl	80024ec <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	4323      	orrs	r3, r4
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e008      	b.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002686:	4817      	ldr	r0, [pc, #92]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002688:	f7ff ff30 	bl	80024ec <LL_ADC_IsEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf0c      	ite	eq
 8002692:	2301      	moveq	r3, #1
 8002694:	2300      	movne	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d010      	beq.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800269c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026a6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026a8:	e009      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80026bc:	e000      	b.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	377c      	adds	r7, #124	; 0x7c
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd90      	pop	{r4, r7, pc}
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40022100 	.word	0x40022100
 80026dc:	40022300 	.word	0x40022300
 80026e0:	58026300 	.word	0x58026300
 80026e4:	58026000 	.word	0x58026000
 80026e8:	fffff0e0 	.word	0xfffff0e0

080026ec <__NVIC_SetPriorityGrouping>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <__NVIC_SetPriorityGrouping+0x40>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	4313      	orrs	r3, r2
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	; (800272c <__NVIC_SetPriorityGrouping+0x40>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00
 8002730:	05fa0000 	.word	0x05fa0000

08002734 <__NVIC_GetPriorityGrouping>:
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	; (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff8e 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff29 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff40 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ff90 	bl	80027e0 <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff5f 	bl	800278c <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff33 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ffa4 	bl	8002848 <SysTick_Config>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e014      	b.n	8002946 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	791b      	ldrb	r3, [r3, #4]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fe fa93 	bl	8000e58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	795b      	ldrb	r3, [r3, #5]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_DAC_Start+0x16>
 8002960:	2302      	movs	r3, #2
 8002962:	e040      	b.n	80029e6 <HAL_DAC_Start+0x98>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2201      	movs	r2, #1
 800297e:	409a      	lsls	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002998:	2b02      	cmp	r3, #2
 800299a:	d11d      	bne.n	80029d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	e014      	b.n	80029d8 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2102      	movs	r1, #2
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d107      	bne.n	80029d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0202 	orr.w	r2, r2, #2
 80029d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	795b      	ldrb	r3, [r3, #5]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_DAC_ConfigChannel+0x18>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e11d      	b.n	8002c48 <HAL_DAC_ConfigChannel+0x254>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2202      	movs	r2, #2
 8002a16:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d174      	bne.n	8002b0a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a20:	f7fe fba6 	bl	8001170 <HAL_GetTick>
 8002a24:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d134      	bne.n	8002a96 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a2c:	e011      	b.n	8002a52 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a2e:	f7fe fb9f 	bl	8001170 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d90a      	bls.n	8002a52 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f043 0208 	orr.w	r2, r3, #8
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0fa      	b.n	8002c48 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a58:	4b7d      	ldr	r3, [pc, #500]	; (8002c50 <HAL_DAC_ConfigChannel+0x25c>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e6      	bne.n	8002a2e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002a60:	2001      	movs	r0, #1
 8002a62:	f7fe fb91 	bl	8001188 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	6992      	ldr	r2, [r2, #24]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a70:	e01e      	b.n	8002ab0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a72:	f7fe fb7d 	bl	8001170 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d90a      	bls.n	8002a96 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f043 0208 	orr.w	r2, r3, #8
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0d8      	b.n	8002c48 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	dbe8      	blt.n	8002a72 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7fe fb71 	bl	8001188 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	6992      	ldr	r2, [r2, #24]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	ea02 0103 	and.w	r1, r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	69da      	ldr	r2, [r3, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	21ff      	movs	r1, #255	; 0xff
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	ea02 0103 	and.w	r1, r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	409a      	lsls	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d11d      	bne.n	8002b4e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	221f      	movs	r2, #31
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4013      	ands	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e00f      	b.n	8002b98 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d102      	bne.n	8002b86 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002b80:	2301      	movs	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	e008      	b.n	8002b98 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e001      	b.n	8002b98 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	400a      	ands	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	22c0      	movs	r2, #192	; 0xc0
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43da      	mvns	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	400a      	ands	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20008000 	.word	0x20008000

08002c54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7fe fa88 	bl	8001170 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e316      	b.n	800329a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a66      	ldr	r2, [pc, #408]	; (8002e0c <HAL_DMA_Init+0x1b8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d04a      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a65      	ldr	r2, [pc, #404]	; (8002e10 <HAL_DMA_Init+0x1bc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d045      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a63      	ldr	r2, [pc, #396]	; (8002e14 <HAL_DMA_Init+0x1c0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d040      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a62      	ldr	r2, [pc, #392]	; (8002e18 <HAL_DMA_Init+0x1c4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d03b      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a60      	ldr	r2, [pc, #384]	; (8002e1c <HAL_DMA_Init+0x1c8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d036      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <HAL_DMA_Init+0x1cc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d031      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a5d      	ldr	r2, [pc, #372]	; (8002e24 <HAL_DMA_Init+0x1d0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d02c      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a5c      	ldr	r2, [pc, #368]	; (8002e28 <HAL_DMA_Init+0x1d4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d027      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a5a      	ldr	r2, [pc, #360]	; (8002e2c <HAL_DMA_Init+0x1d8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d022      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a59      	ldr	r2, [pc, #356]	; (8002e30 <HAL_DMA_Init+0x1dc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d01d      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a57      	ldr	r2, [pc, #348]	; (8002e34 <HAL_DMA_Init+0x1e0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d018      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a56      	ldr	r2, [pc, #344]	; (8002e38 <HAL_DMA_Init+0x1e4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d013      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a54      	ldr	r2, [pc, #336]	; (8002e3c <HAL_DMA_Init+0x1e8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00e      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a53      	ldr	r2, [pc, #332]	; (8002e40 <HAL_DMA_Init+0x1ec>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d009      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_DMA_Init+0x1f0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_DMA_Init+0x1f4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_DMA_Init+0xbc>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_Init+0xbe>
 8002d10:	2300      	movs	r3, #0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 813b 	beq.w	8002f8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a37      	ldr	r2, [pc, #220]	; (8002e0c <HAL_DMA_Init+0x1b8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d04a      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a36      	ldr	r2, [pc, #216]	; (8002e10 <HAL_DMA_Init+0x1bc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d045      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a34      	ldr	r2, [pc, #208]	; (8002e14 <HAL_DMA_Init+0x1c0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d040      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a33      	ldr	r2, [pc, #204]	; (8002e18 <HAL_DMA_Init+0x1c4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d03b      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <HAL_DMA_Init+0x1c8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d036      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <HAL_DMA_Init+0x1cc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d031      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2e      	ldr	r2, [pc, #184]	; (8002e24 <HAL_DMA_Init+0x1d0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02c      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <HAL_DMA_Init+0x1d4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d027      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	; (8002e2c <HAL_DMA_Init+0x1d8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d022      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <HAL_DMA_Init+0x1dc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a28      	ldr	r2, [pc, #160]	; (8002e34 <HAL_DMA_Init+0x1e0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a27      	ldr	r2, [pc, #156]	; (8002e38 <HAL_DMA_Init+0x1e4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <HAL_DMA_Init+0x1e8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a24      	ldr	r2, [pc, #144]	; (8002e40 <HAL_DMA_Init+0x1ec>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_DMA_Init+0x1f0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <HAL_DMA_Init+0x1f4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d108      	bne.n	8002dda <HAL_DMA_Init+0x186>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e007      	b.n	8002dea <HAL_DMA_Init+0x196>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dea:	e02f      	b.n	8002e4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dec:	f7fe f9c0 	bl	8001170 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d928      	bls.n	8002e4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2203      	movs	r2, #3
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e246      	b.n	800329a <HAL_DMA_Init+0x646>
 8002e0c:	40020010 	.word	0x40020010
 8002e10:	40020028 	.word	0x40020028
 8002e14:	40020040 	.word	0x40020040
 8002e18:	40020058 	.word	0x40020058
 8002e1c:	40020070 	.word	0x40020070
 8002e20:	40020088 	.word	0x40020088
 8002e24:	400200a0 	.word	0x400200a0
 8002e28:	400200b8 	.word	0x400200b8
 8002e2c:	40020410 	.word	0x40020410
 8002e30:	40020428 	.word	0x40020428
 8002e34:	40020440 	.word	0x40020440
 8002e38:	40020458 	.word	0x40020458
 8002e3c:	40020470 	.word	0x40020470
 8002e40:	40020488 	.word	0x40020488
 8002e44:	400204a0 	.word	0x400204a0
 8002e48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1c8      	bne.n	8002dec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4b83      	ldr	r3, [pc, #524]	; (8003074 <HAL_DMA_Init+0x420>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d107      	bne.n	8002eb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002eb0:	4b71      	ldr	r3, [pc, #452]	; (8003078 <HAL_DMA_Init+0x424>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b71      	ldr	r3, [pc, #452]	; (800307c <HAL_DMA_Init+0x428>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ebc:	d328      	bcc.n	8002f10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b28      	cmp	r3, #40	; 0x28
 8002ec4:	d903      	bls.n	8002ece <HAL_DMA_Init+0x27a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b2e      	cmp	r3, #46	; 0x2e
 8002ecc:	d917      	bls.n	8002efe <HAL_DMA_Init+0x2aa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ed4:	d903      	bls.n	8002ede <HAL_DMA_Init+0x28a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b42      	cmp	r3, #66	; 0x42
 8002edc:	d90f      	bls.n	8002efe <HAL_DMA_Init+0x2aa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b46      	cmp	r3, #70	; 0x46
 8002ee4:	d903      	bls.n	8002eee <HAL_DMA_Init+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b48      	cmp	r3, #72	; 0x48
 8002eec:	d907      	bls.n	8002efe <HAL_DMA_Init+0x2aa>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b4e      	cmp	r3, #78	; 0x4e
 8002ef4:	d905      	bls.n	8002f02 <HAL_DMA_Init+0x2ae>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b52      	cmp	r3, #82	; 0x52
 8002efc:	d801      	bhi.n	8002f02 <HAL_DMA_Init+0x2ae>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_DMA_Init+0x2b0>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f023 0307 	bic.w	r3, r3, #7
 8002f26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d117      	bne.n	8002f6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f001 fdcf 	bl	8004af0 <DMA_CheckFifoParam>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2240      	movs	r2, #64	; 0x40
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e197      	b.n	800329a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f001 fd0a 	bl	800498c <DMA_CalcBaseAndBitshift>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	223f      	movs	r2, #63	; 0x3f
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	e0cd      	b.n	800312a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a3b      	ldr	r2, [pc, #236]	; (8003080 <HAL_DMA_Init+0x42c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a39      	ldr	r2, [pc, #228]	; (8003084 <HAL_DMA_Init+0x430>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <HAL_DMA_Init+0x434>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a36      	ldr	r2, [pc, #216]	; (800308c <HAL_DMA_Init+0x438>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a35      	ldr	r2, [pc, #212]	; (8003090 <HAL_DMA_Init+0x43c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a33      	ldr	r2, [pc, #204]	; (8003094 <HAL_DMA_Init+0x440>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a32      	ldr	r2, [pc, #200]	; (8003098 <HAL_DMA_Init+0x444>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a30      	ldr	r2, [pc, #192]	; (800309c <HAL_DMA_Init+0x448>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Init+0x38e>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_Init+0x390>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8097 	beq.w	8003118 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a24      	ldr	r2, [pc, #144]	; (8003080 <HAL_DMA_Init+0x42c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d021      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a22      	ldr	r2, [pc, #136]	; (8003084 <HAL_DMA_Init+0x430>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01c      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a21      	ldr	r2, [pc, #132]	; (8003088 <HAL_DMA_Init+0x434>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d017      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1f      	ldr	r2, [pc, #124]	; (800308c <HAL_DMA_Init+0x438>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d012      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <HAL_DMA_Init+0x43c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00d      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_DMA_Init+0x440>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d008      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <HAL_DMA_Init+0x444>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a19      	ldr	r2, [pc, #100]	; (800309c <HAL_DMA_Init+0x448>)
 8003036:	4293      	cmp	r3, r2
 8003038:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_DMA_Init+0x44c>)
 8003056:	4013      	ands	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d020      	beq.n	80030a4 <HAL_DMA_Init+0x450>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d102      	bne.n	8003070 <HAL_DMA_Init+0x41c>
 800306a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800306e:	e01a      	b.n	80030a6 <HAL_DMA_Init+0x452>
 8003070:	2300      	movs	r3, #0
 8003072:	e018      	b.n	80030a6 <HAL_DMA_Init+0x452>
 8003074:	fe10803f 	.word	0xfe10803f
 8003078:	5c001000 	.word	0x5c001000
 800307c:	ffff0000 	.word	0xffff0000
 8003080:	58025408 	.word	0x58025408
 8003084:	5802541c 	.word	0x5802541c
 8003088:	58025430 	.word	0x58025430
 800308c:	58025444 	.word	0x58025444
 8003090:	58025458 	.word	0x58025458
 8003094:	5802546c 	.word	0x5802546c
 8003098:	58025480 	.word	0x58025480
 800309c:	58025494 	.word	0x58025494
 80030a0:	fffe000f 	.word	0xfffe000f
 80030a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68d2      	ldr	r2, [r2, #12]
 80030aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b6e      	ldr	r3, [pc, #440]	; (80032a4 <HAL_DMA_Init+0x650>)
 80030ec:	4413      	add	r3, r2
 80030ee:	4a6e      	ldr	r2, [pc, #440]	; (80032a8 <HAL_DMA_Init+0x654>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f001 fc45 	bl	800498c <DMA_CalcBaseAndBitshift>
 8003102:	4603      	mov	r3, r0
 8003104:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2201      	movs	r2, #1
 8003110:	409a      	lsls	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e008      	b.n	800312a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0b7      	b.n	800329a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5f      	ldr	r2, [pc, #380]	; (80032ac <HAL_DMA_Init+0x658>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d072      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5d      	ldr	r2, [pc, #372]	; (80032b0 <HAL_DMA_Init+0x65c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d06d      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5c      	ldr	r2, [pc, #368]	; (80032b4 <HAL_DMA_Init+0x660>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d068      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5a      	ldr	r2, [pc, #360]	; (80032b8 <HAL_DMA_Init+0x664>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d063      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a59      	ldr	r2, [pc, #356]	; (80032bc <HAL_DMA_Init+0x668>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d05e      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <HAL_DMA_Init+0x66c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d059      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_DMA_Init+0x670>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d054      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a54      	ldr	r2, [pc, #336]	; (80032c8 <HAL_DMA_Init+0x674>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04f      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a53      	ldr	r2, [pc, #332]	; (80032cc <HAL_DMA_Init+0x678>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d04a      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_DMA_Init+0x67c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d045      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_DMA_Init+0x680>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a4e      	ldr	r2, [pc, #312]	; (80032d8 <HAL_DMA_Init+0x684>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03b      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4d      	ldr	r2, [pc, #308]	; (80032dc <HAL_DMA_Init+0x688>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d036      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a4b      	ldr	r2, [pc, #300]	; (80032e0 <HAL_DMA_Init+0x68c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_DMA_Init+0x690>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02c      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a48      	ldr	r2, [pc, #288]	; (80032e8 <HAL_DMA_Init+0x694>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d027      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a47      	ldr	r2, [pc, #284]	; (80032ec <HAL_DMA_Init+0x698>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a45      	ldr	r2, [pc, #276]	; (80032f0 <HAL_DMA_Init+0x69c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a44      	ldr	r2, [pc, #272]	; (80032f4 <HAL_DMA_Init+0x6a0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a42      	ldr	r2, [pc, #264]	; (80032f8 <HAL_DMA_Init+0x6a4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a41      	ldr	r2, [pc, #260]	; (80032fc <HAL_DMA_Init+0x6a8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <HAL_DMA_Init+0x6ac>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3e      	ldr	r2, [pc, #248]	; (8003304 <HAL_DMA_Init+0x6b0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3c      	ldr	r2, [pc, #240]	; (8003308 <HAL_DMA_Init+0x6b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_DMA_Init+0x5ca>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_DMA_Init+0x5cc>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d032      	beq.n	800328a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f001 fcdf 	bl	8004be8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d102      	bne.n	8003238 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800324c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d010      	beq.n	8003278 <HAL_DMA_Init+0x624>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d80c      	bhi.n	8003278 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f001 fd5c 	bl	8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	e008      	b.n	800328a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	a7fdabf8 	.word	0xa7fdabf8
 80032a8:	cccccccd 	.word	0xcccccccd
 80032ac:	40020010 	.word	0x40020010
 80032b0:	40020028 	.word	0x40020028
 80032b4:	40020040 	.word	0x40020040
 80032b8:	40020058 	.word	0x40020058
 80032bc:	40020070 	.word	0x40020070
 80032c0:	40020088 	.word	0x40020088
 80032c4:	400200a0 	.word	0x400200a0
 80032c8:	400200b8 	.word	0x400200b8
 80032cc:	40020410 	.word	0x40020410
 80032d0:	40020428 	.word	0x40020428
 80032d4:	40020440 	.word	0x40020440
 80032d8:	40020458 	.word	0x40020458
 80032dc:	40020470 	.word	0x40020470
 80032e0:	40020488 	.word	0x40020488
 80032e4:	400204a0 	.word	0x400204a0
 80032e8:	400204b8 	.word	0x400204b8
 80032ec:	58025408 	.word	0x58025408
 80032f0:	5802541c 	.word	0x5802541c
 80032f4:	58025430 	.word	0x58025430
 80032f8:	58025444 	.word	0x58025444
 80032fc:	58025458 	.word	0x58025458
 8003300:	5802546c 	.word	0x5802546c
 8003304:	58025480 	.word	0x58025480
 8003308:	58025494 	.word	0x58025494

0800330c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e226      	b.n	8003776 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_DMA_Start_IT+0x2a>
 8003332:	2302      	movs	r3, #2
 8003334:	e21f      	b.n	8003776 <HAL_DMA_Start_IT+0x46a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	f040 820a 	bne.w	8003760 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a68      	ldr	r2, [pc, #416]	; (8003500 <HAL_DMA_Start_IT+0x1f4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d04a      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a66      	ldr	r2, [pc, #408]	; (8003504 <HAL_DMA_Start_IT+0x1f8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d045      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a65      	ldr	r2, [pc, #404]	; (8003508 <HAL_DMA_Start_IT+0x1fc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d040      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a63      	ldr	r2, [pc, #396]	; (800350c <HAL_DMA_Start_IT+0x200>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d03b      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a62      	ldr	r2, [pc, #392]	; (8003510 <HAL_DMA_Start_IT+0x204>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d036      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a60      	ldr	r2, [pc, #384]	; (8003514 <HAL_DMA_Start_IT+0x208>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d031      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a5f      	ldr	r2, [pc, #380]	; (8003518 <HAL_DMA_Start_IT+0x20c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d02c      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a5d      	ldr	r2, [pc, #372]	; (800351c <HAL_DMA_Start_IT+0x210>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d027      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <HAL_DMA_Start_IT+0x214>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a5a      	ldr	r2, [pc, #360]	; (8003524 <HAL_DMA_Start_IT+0x218>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01d      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a59      	ldr	r2, [pc, #356]	; (8003528 <HAL_DMA_Start_IT+0x21c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a57      	ldr	r2, [pc, #348]	; (800352c <HAL_DMA_Start_IT+0x220>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a56      	ldr	r2, [pc, #344]	; (8003530 <HAL_DMA_Start_IT+0x224>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a54      	ldr	r2, [pc, #336]	; (8003534 <HAL_DMA_Start_IT+0x228>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a53      	ldr	r2, [pc, #332]	; (8003538 <HAL_DMA_Start_IT+0x22c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_DMA_Start_IT+0xee>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a51      	ldr	r2, [pc, #324]	; (800353c <HAL_DMA_Start_IT+0x230>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <HAL_DMA_Start_IT+0x100>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e007      	b.n	800341c <HAL_DMA_Start_IT+0x110>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f001 f906 	bl	8004634 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a34      	ldr	r2, [pc, #208]	; (8003500 <HAL_DMA_Start_IT+0x1f4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d04a      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a33      	ldr	r2, [pc, #204]	; (8003504 <HAL_DMA_Start_IT+0x1f8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d045      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a31      	ldr	r2, [pc, #196]	; (8003508 <HAL_DMA_Start_IT+0x1fc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d040      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a30      	ldr	r2, [pc, #192]	; (800350c <HAL_DMA_Start_IT+0x200>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d03b      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2e      	ldr	r2, [pc, #184]	; (8003510 <HAL_DMA_Start_IT+0x204>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d036      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2d      	ldr	r2, [pc, #180]	; (8003514 <HAL_DMA_Start_IT+0x208>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d031      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <HAL_DMA_Start_IT+0x20c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02c      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2a      	ldr	r2, [pc, #168]	; (800351c <HAL_DMA_Start_IT+0x210>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d027      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a28      	ldr	r2, [pc, #160]	; (8003520 <HAL_DMA_Start_IT+0x214>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d022      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a27      	ldr	r2, [pc, #156]	; (8003524 <HAL_DMA_Start_IT+0x218>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d01d      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a25      	ldr	r2, [pc, #148]	; (8003528 <HAL_DMA_Start_IT+0x21c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a24      	ldr	r2, [pc, #144]	; (800352c <HAL_DMA_Start_IT+0x220>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <HAL_DMA_Start_IT+0x224>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a21      	ldr	r2, [pc, #132]	; (8003534 <HAL_DMA_Start_IT+0x228>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <HAL_DMA_Start_IT+0x22c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_DMA_Start_IT+0x1bc>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1e      	ldr	r2, [pc, #120]	; (800353c <HAL_DMA_Start_IT+0x230>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_DMA_Start_IT+0x1c0>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_DMA_Start_IT+0x1c2>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d036      	beq.n	8003540 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 021e 	bic.w	r2, r3, #30
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0216 	orr.w	r2, r2, #22
 80034e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03e      	beq.n	800356c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0208 	orr.w	r2, r2, #8
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e035      	b.n	800356c <HAL_DMA_Start_IT+0x260>
 8003500:	40020010 	.word	0x40020010
 8003504:	40020028 	.word	0x40020028
 8003508:	40020040 	.word	0x40020040
 800350c:	40020058 	.word	0x40020058
 8003510:	40020070 	.word	0x40020070
 8003514:	40020088 	.word	0x40020088
 8003518:	400200a0 	.word	0x400200a0
 800351c:	400200b8 	.word	0x400200b8
 8003520:	40020410 	.word	0x40020410
 8003524:	40020428 	.word	0x40020428
 8003528:	40020440 	.word	0x40020440
 800352c:	40020458 	.word	0x40020458
 8003530:	40020470 	.word	0x40020470
 8003534:	40020488 	.word	0x40020488
 8003538:	400204a0 	.word	0x400204a0
 800353c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 020e 	bic.w	r2, r3, #14
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 020a 	orr.w	r2, r2, #10
 8003552:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0204 	orr.w	r2, r2, #4
 800356a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a83      	ldr	r2, [pc, #524]	; (8003780 <HAL_DMA_Start_IT+0x474>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d072      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a82      	ldr	r2, [pc, #520]	; (8003784 <HAL_DMA_Start_IT+0x478>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d06d      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a80      	ldr	r2, [pc, #512]	; (8003788 <HAL_DMA_Start_IT+0x47c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d068      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a7f      	ldr	r2, [pc, #508]	; (800378c <HAL_DMA_Start_IT+0x480>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d063      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a7d      	ldr	r2, [pc, #500]	; (8003790 <HAL_DMA_Start_IT+0x484>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d05e      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a7c      	ldr	r2, [pc, #496]	; (8003794 <HAL_DMA_Start_IT+0x488>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d059      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a7a      	ldr	r2, [pc, #488]	; (8003798 <HAL_DMA_Start_IT+0x48c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d054      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a79      	ldr	r2, [pc, #484]	; (800379c <HAL_DMA_Start_IT+0x490>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d04f      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a77      	ldr	r2, [pc, #476]	; (80037a0 <HAL_DMA_Start_IT+0x494>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d04a      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a76      	ldr	r2, [pc, #472]	; (80037a4 <HAL_DMA_Start_IT+0x498>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d045      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a74      	ldr	r2, [pc, #464]	; (80037a8 <HAL_DMA_Start_IT+0x49c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d040      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a73      	ldr	r2, [pc, #460]	; (80037ac <HAL_DMA_Start_IT+0x4a0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d03b      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a71      	ldr	r2, [pc, #452]	; (80037b0 <HAL_DMA_Start_IT+0x4a4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d036      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a70      	ldr	r2, [pc, #448]	; (80037b4 <HAL_DMA_Start_IT+0x4a8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d031      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6e      	ldr	r2, [pc, #440]	; (80037b8 <HAL_DMA_Start_IT+0x4ac>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02c      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6d      	ldr	r2, [pc, #436]	; (80037bc <HAL_DMA_Start_IT+0x4b0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d027      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6b      	ldr	r2, [pc, #428]	; (80037c0 <HAL_DMA_Start_IT+0x4b4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d022      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6a      	ldr	r2, [pc, #424]	; (80037c4 <HAL_DMA_Start_IT+0x4b8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d01d      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_DMA_Start_IT+0x4bc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d018      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a67      	ldr	r2, [pc, #412]	; (80037cc <HAL_DMA_Start_IT+0x4c0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a65      	ldr	r2, [pc, #404]	; (80037d0 <HAL_DMA_Start_IT+0x4c4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00e      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a64      	ldr	r2, [pc, #400]	; (80037d4 <HAL_DMA_Start_IT+0x4c8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a62      	ldr	r2, [pc, #392]	; (80037d8 <HAL_DMA_Start_IT+0x4cc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_DMA_Start_IT+0x350>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a61      	ldr	r2, [pc, #388]	; (80037dc <HAL_DMA_Start_IT+0x4d0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <HAL_DMA_Start_IT+0x354>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_DMA_Start_IT+0x356>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01a      	beq.n	800369c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003682:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a37      	ldr	r2, [pc, #220]	; (8003780 <HAL_DMA_Start_IT+0x474>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d04a      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a36      	ldr	r2, [pc, #216]	; (8003784 <HAL_DMA_Start_IT+0x478>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d045      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a34      	ldr	r2, [pc, #208]	; (8003788 <HAL_DMA_Start_IT+0x47c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d040      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a33      	ldr	r2, [pc, #204]	; (800378c <HAL_DMA_Start_IT+0x480>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d03b      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a31      	ldr	r2, [pc, #196]	; (8003790 <HAL_DMA_Start_IT+0x484>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d036      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a30      	ldr	r2, [pc, #192]	; (8003794 <HAL_DMA_Start_IT+0x488>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d031      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2e      	ldr	r2, [pc, #184]	; (8003798 <HAL_DMA_Start_IT+0x48c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02c      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2d      	ldr	r2, [pc, #180]	; (800379c <HAL_DMA_Start_IT+0x490>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d027      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <HAL_DMA_Start_IT+0x494>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d022      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <HAL_DMA_Start_IT+0x498>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d01d      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <HAL_DMA_Start_IT+0x49c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a27      	ldr	r2, [pc, #156]	; (80037ac <HAL_DMA_Start_IT+0x4a0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <HAL_DMA_Start_IT+0x4a4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a24      	ldr	r2, [pc, #144]	; (80037b4 <HAL_DMA_Start_IT+0x4a8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <HAL_DMA_Start_IT+0x4ac>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_DMA_Start_IT+0x430>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <HAL_DMA_Start_IT+0x4b0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <HAL_DMA_Start_IT+0x442>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e012      	b.n	8003774 <HAL_DMA_Start_IT+0x468>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e009      	b.n	8003774 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800376e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40020010 	.word	0x40020010
 8003784:	40020028 	.word	0x40020028
 8003788:	40020040 	.word	0x40020040
 800378c:	40020058 	.word	0x40020058
 8003790:	40020070 	.word	0x40020070
 8003794:	40020088 	.word	0x40020088
 8003798:	400200a0 	.word	0x400200a0
 800379c:	400200b8 	.word	0x400200b8
 80037a0:	40020410 	.word	0x40020410
 80037a4:	40020428 	.word	0x40020428
 80037a8:	40020440 	.word	0x40020440
 80037ac:	40020458 	.word	0x40020458
 80037b0:	40020470 	.word	0x40020470
 80037b4:	40020488 	.word	0x40020488
 80037b8:	400204a0 	.word	0x400204a0
 80037bc:	400204b8 	.word	0x400204b8
 80037c0:	58025408 	.word	0x58025408
 80037c4:	5802541c 	.word	0x5802541c
 80037c8:	58025430 	.word	0x58025430
 80037cc:	58025444 	.word	0x58025444
 80037d0:	58025458 	.word	0x58025458
 80037d4:	5802546c 	.word	0x5802546c
 80037d8:	58025480 	.word	0x58025480
 80037dc:	58025494 	.word	0x58025494

080037e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037ec:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_DMA_IRQHandler+0x1ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a67      	ldr	r2, [pc, #412]	; (8003990 <HAL_DMA_IRQHandler+0x1b0>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0a9b      	lsrs	r3, r3, #10
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a5f      	ldr	r2, [pc, #380]	; (8003994 <HAL_DMA_IRQHandler+0x1b4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d04a      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a5d      	ldr	r2, [pc, #372]	; (8003998 <HAL_DMA_IRQHandler+0x1b8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d045      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a5c      	ldr	r2, [pc, #368]	; (800399c <HAL_DMA_IRQHandler+0x1bc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d040      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d03b      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a59      	ldr	r2, [pc, #356]	; (80039a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d036      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a57      	ldr	r2, [pc, #348]	; (80039a8 <HAL_DMA_IRQHandler+0x1c8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d031      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a56      	ldr	r2, [pc, #344]	; (80039ac <HAL_DMA_IRQHandler+0x1cc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d02c      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a54      	ldr	r2, [pc, #336]	; (80039b0 <HAL_DMA_IRQHandler+0x1d0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d027      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a53      	ldr	r2, [pc, #332]	; (80039b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a51      	ldr	r2, [pc, #324]	; (80039b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01d      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_DMA_IRQHandler+0x1dc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a4e      	ldr	r2, [pc, #312]	; (80039c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a4d      	ldr	r2, [pc, #308]	; (80039c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <HAL_DMA_IRQHandler+0x1e8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a4a      	ldr	r2, [pc, #296]	; (80039cc <HAL_DMA_IRQHandler+0x1ec>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a48      	ldr	r2, [pc, #288]	; (80039d0 <HAL_DMA_IRQHandler+0x1f0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_DMA_IRQHandler+0xd6>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_DMA_IRQHandler+0xd8>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 842b 	beq.w	8004114 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2208      	movs	r2, #8
 80038c8:	409a      	lsls	r2, r3
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80a2 	beq.w	8003a18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <HAL_DMA_IRQHandler+0x1b4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2d      	ldr	r2, [pc, #180]	; (8003998 <HAL_DMA_IRQHandler+0x1b8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_DMA_IRQHandler+0x1bc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_DMA_IRQHandler+0x1c0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <HAL_DMA_IRQHandler+0x1c8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <HAL_DMA_IRQHandler+0x1cc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_DMA_IRQHandler+0x1d4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_DMA_IRQHandler+0x1dc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_DMA_IRQHandler+0x1e8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_DMA_IRQHandler+0x1ec>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d12f      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x1f4>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e02e      	b.n	80039e8 <HAL_DMA_IRQHandler+0x208>
 800398a:	bf00      	nop
 800398c:	20000000 	.word	0x20000000
 8003990:	1b4e81b5 	.word	0x1b4e81b5
 8003994:	40020010 	.word	0x40020010
 8003998:	40020028 	.word	0x40020028
 800399c:	40020040 	.word	0x40020040
 80039a0:	40020058 	.word	0x40020058
 80039a4:	40020070 	.word	0x40020070
 80039a8:	40020088 	.word	0x40020088
 80039ac:	400200a0 	.word	0x400200a0
 80039b0:	400200b8 	.word	0x400200b8
 80039b4:	40020410 	.word	0x40020410
 80039b8:	40020428 	.word	0x40020428
 80039bc:	40020440 	.word	0x40020440
 80039c0:	40020458 	.word	0x40020458
 80039c4:	40020470 	.word	0x40020470
 80039c8:	40020488 	.word	0x40020488
 80039cc:	400204a0 	.word	0x400204a0
 80039d0:	400204b8 	.word	0x400204b8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf14      	ite	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	2300      	moveq	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d015      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	2208      	movs	r2, #8
 8003a06:	409a      	lsls	r2, r3
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d06e      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_DMA_IRQHandler+0x3f8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d04a      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a67      	ldr	r2, [pc, #412]	; (8003bdc <HAL_DMA_IRQHandler+0x3fc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d045      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a66      	ldr	r2, [pc, #408]	; (8003be0 <HAL_DMA_IRQHandler+0x400>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d040      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a64      	ldr	r2, [pc, #400]	; (8003be4 <HAL_DMA_IRQHandler+0x404>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d03b      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a63      	ldr	r2, [pc, #396]	; (8003be8 <HAL_DMA_IRQHandler+0x408>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d036      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a61      	ldr	r2, [pc, #388]	; (8003bec <HAL_DMA_IRQHandler+0x40c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d031      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a60      	ldr	r2, [pc, #384]	; (8003bf0 <HAL_DMA_IRQHandler+0x410>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d02c      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5e      	ldr	r2, [pc, #376]	; (8003bf4 <HAL_DMA_IRQHandler+0x414>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d027      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5d      	ldr	r2, [pc, #372]	; (8003bf8 <HAL_DMA_IRQHandler+0x418>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d022      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5b      	ldr	r2, [pc, #364]	; (8003bfc <HAL_DMA_IRQHandler+0x41c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_DMA_IRQHandler+0x420>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <HAL_DMA_IRQHandler+0x424>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a57      	ldr	r2, [pc, #348]	; (8003c08 <HAL_DMA_IRQHandler+0x428>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a55      	ldr	r2, [pc, #340]	; (8003c0c <HAL_DMA_IRQHandler+0x42c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a54      	ldr	r2, [pc, #336]	; (8003c10 <HAL_DMA_IRQHandler+0x430>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_DMA_IRQHandler+0x434>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10a      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x304>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf14      	ite	ne
 8003adc:	2301      	movne	r3, #1
 8003ade:	2300      	moveq	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e003      	b.n	8003aec <HAL_DMA_IRQHandler+0x30c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2201      	movs	r2, #1
 8003afa:	409a      	lsls	r2, r3
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f043 0202 	orr.w	r2, r3, #2
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2204      	movs	r2, #4
 8003b16:	409a      	lsls	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 808f 	beq.w	8003c40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <HAL_DMA_IRQHandler+0x3f8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d04a      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <HAL_DMA_IRQHandler+0x3fc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d045      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_DMA_IRQHandler+0x400>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d040      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <HAL_DMA_IRQHandler+0x404>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d03b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <HAL_DMA_IRQHandler+0x408>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d036      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a24      	ldr	r2, [pc, #144]	; (8003bec <HAL_DMA_IRQHandler+0x40c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d031      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <HAL_DMA_IRQHandler+0x410>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d02c      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <HAL_DMA_IRQHandler+0x414>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d027      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <HAL_DMA_IRQHandler+0x418>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <HAL_DMA_IRQHandler+0x41c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01d      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <HAL_DMA_IRQHandler+0x420>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <HAL_DMA_IRQHandler+0x424>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <HAL_DMA_IRQHandler+0x428>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_DMA_IRQHandler+0x42c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_DMA_IRQHandler+0x430>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <HAL_DMA_IRQHandler+0x434>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d12a      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x438>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e023      	b.n	8003c20 <HAL_DMA_IRQHandler+0x440>
 8003bd8:	40020010 	.word	0x40020010
 8003bdc:	40020028 	.word	0x40020028
 8003be0:	40020040 	.word	0x40020040
 8003be4:	40020058 	.word	0x40020058
 8003be8:	40020070 	.word	0x40020070
 8003bec:	40020088 	.word	0x40020088
 8003bf0:	400200a0 	.word	0x400200a0
 8003bf4:	400200b8 	.word	0x400200b8
 8003bf8:	40020410 	.word	0x40020410
 8003bfc:	40020428 	.word	0x40020428
 8003c00:	40020440 	.word	0x40020440
 8003c04:	40020458 	.word	0x40020458
 8003c08:	40020470 	.word	0x40020470
 8003c0c:	40020488 	.word	0x40020488
 8003c10:	400204a0 	.word	0x400204a0
 8003c14:	400204b8 	.word	0x400204b8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	2210      	movs	r2, #16
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a6 	beq.w	8003da2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a85      	ldr	r2, [pc, #532]	; (8003e70 <HAL_DMA_IRQHandler+0x690>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d04a      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a83      	ldr	r2, [pc, #524]	; (8003e74 <HAL_DMA_IRQHandler+0x694>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d045      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a82      	ldr	r2, [pc, #520]	; (8003e78 <HAL_DMA_IRQHandler+0x698>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d040      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a80      	ldr	r2, [pc, #512]	; (8003e7c <HAL_DMA_IRQHandler+0x69c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d03b      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7f      	ldr	r2, [pc, #508]	; (8003e80 <HAL_DMA_IRQHandler+0x6a0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d036      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7d      	ldr	r2, [pc, #500]	; (8003e84 <HAL_DMA_IRQHandler+0x6a4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d031      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7c      	ldr	r2, [pc, #496]	; (8003e88 <HAL_DMA_IRQHandler+0x6a8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d02c      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7a      	ldr	r2, [pc, #488]	; (8003e8c <HAL_DMA_IRQHandler+0x6ac>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d027      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a79      	ldr	r2, [pc, #484]	; (8003e90 <HAL_DMA_IRQHandler+0x6b0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d022      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a77      	ldr	r2, [pc, #476]	; (8003e94 <HAL_DMA_IRQHandler+0x6b4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a76      	ldr	r2, [pc, #472]	; (8003e98 <HAL_DMA_IRQHandler+0x6b8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a74      	ldr	r2, [pc, #464]	; (8003e9c <HAL_DMA_IRQHandler+0x6bc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a73      	ldr	r2, [pc, #460]	; (8003ea0 <HAL_DMA_IRQHandler+0x6c0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a71      	ldr	r2, [pc, #452]	; (8003ea4 <HAL_DMA_IRQHandler+0x6c4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a70      	ldr	r2, [pc, #448]	; (8003ea8 <HAL_DMA_IRQHandler+0x6c8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6e      	ldr	r2, [pc, #440]	; (8003eac <HAL_DMA_IRQHandler+0x6cc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10a      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x52c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e009      	b.n	8003d20 <HAL_DMA_IRQHandler+0x540>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d03e      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d018      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d108      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d024      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
 8003d60:	e01f      	b.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01b      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
 8003d72:	e016      	b.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0208 	bic.w	r2, r2, #8
 8003d90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	2220      	movs	r2, #32
 8003dac:	409a      	lsls	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8110 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <HAL_DMA_IRQHandler+0x690>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d04a      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <HAL_DMA_IRQHandler+0x694>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d045      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <HAL_DMA_IRQHandler+0x698>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d040      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <HAL_DMA_IRQHandler+0x69c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d03b      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <HAL_DMA_IRQHandler+0x6a0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d036      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <HAL_DMA_IRQHandler+0x6a4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d031      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <HAL_DMA_IRQHandler+0x6a8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d02c      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_DMA_IRQHandler+0x6ac>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d027      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_DMA_IRQHandler+0x6b0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_DMA_IRQHandler+0x6b4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01d      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_DMA_IRQHandler+0x6b8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_DMA_IRQHandler+0x6bc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_DMA_IRQHandler+0x6c0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_DMA_IRQHandler+0x6c4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a16      	ldr	r2, [pc, #88]	; (8003eac <HAL_DMA_IRQHandler+0x6cc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d12b      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0x6d0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e02a      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x6e4>
 8003e6e:	bf00      	nop
 8003e70:	40020010 	.word	0x40020010
 8003e74:	40020028 	.word	0x40020028
 8003e78:	40020040 	.word	0x40020040
 8003e7c:	40020058 	.word	0x40020058
 8003e80:	40020070 	.word	0x40020070
 8003e84:	40020088 	.word	0x40020088
 8003e88:	400200a0 	.word	0x400200a0
 8003e8c:	400200b8 	.word	0x400200b8
 8003e90:	40020410 	.word	0x40020410
 8003e94:	40020428 	.word	0x40020428
 8003e98:	40020440 	.word	0x40020440
 8003e9c:	40020458 	.word	0x40020458
 8003ea0:	40020470 	.word	0x40020470
 8003ea4:	40020488 	.word	0x40020488
 8003ea8:	400204a0 	.word	0x400204a0
 8003eac:	400204b8 	.word	0x400204b8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf14      	ite	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	2300      	moveq	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8087 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d139      	bne.n	8003f5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0216 	bic.w	r2, r2, #22
 8003ef4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x736>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0208 	bic.w	r2, r2, #8
 8003f24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	223f      	movs	r2, #63	; 0x3f
 8003f30:	409a      	lsls	r2, r3
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 834a 	beq.w	80045e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
          }
          return;
 8003f58:	e344      	b.n	80045e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d018      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d02c      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
 8003f86:	e027      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d023      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
 8003f98:	e01e      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10f      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0210 	bic.w	r2, r2, #16
 8003fb6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8306 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8088 	beq.w	8004100 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7a      	ldr	r2, [pc, #488]	; (80041e8 <HAL_DMA_IRQHandler+0xa08>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d04a      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a79      	ldr	r2, [pc, #484]	; (80041ec <HAL_DMA_IRQHandler+0xa0c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d045      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a77      	ldr	r2, [pc, #476]	; (80041f0 <HAL_DMA_IRQHandler+0xa10>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d040      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a76      	ldr	r2, [pc, #472]	; (80041f4 <HAL_DMA_IRQHandler+0xa14>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d03b      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a74      	ldr	r2, [pc, #464]	; (80041f8 <HAL_DMA_IRQHandler+0xa18>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d036      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a73      	ldr	r2, [pc, #460]	; (80041fc <HAL_DMA_IRQHandler+0xa1c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d031      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a71      	ldr	r2, [pc, #452]	; (8004200 <HAL_DMA_IRQHandler+0xa20>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02c      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a70      	ldr	r2, [pc, #448]	; (8004204 <HAL_DMA_IRQHandler+0xa24>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d027      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_DMA_IRQHandler+0xa28>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d022      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6d      	ldr	r2, [pc, #436]	; (800420c <HAL_DMA_IRQHandler+0xa2c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d01d      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a6b      	ldr	r2, [pc, #428]	; (8004210 <HAL_DMA_IRQHandler+0xa30>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d018      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6a      	ldr	r2, [pc, #424]	; (8004214 <HAL_DMA_IRQHandler+0xa34>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a68      	ldr	r2, [pc, #416]	; (8004218 <HAL_DMA_IRQHandler+0xa38>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a67      	ldr	r2, [pc, #412]	; (800421c <HAL_DMA_IRQHandler+0xa3c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a65      	ldr	r2, [pc, #404]	; (8004220 <HAL_DMA_IRQHandler+0xa40>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a64      	ldr	r2, [pc, #400]	; (8004224 <HAL_DMA_IRQHandler+0xa44>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d108      	bne.n	80040aa <HAL_DMA_IRQHandler+0x8ca>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e007      	b.n	80040ba <HAL_DMA_IRQHandler+0x8da>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d307      	bcc.n	80040d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f2      	bne.n	80040ba <HAL_DMA_IRQHandler+0x8da>
 80040d4:	e000      	b.n	80040d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80040d6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040f6:	e003      	b.n	8004100 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8272 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
 8004112:	e26c      	b.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a43      	ldr	r2, [pc, #268]	; (8004228 <HAL_DMA_IRQHandler+0xa48>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a42      	ldr	r2, [pc, #264]	; (800422c <HAL_DMA_IRQHandler+0xa4c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01d      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a40      	ldr	r2, [pc, #256]	; (8004230 <HAL_DMA_IRQHandler+0xa50>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3f      	ldr	r2, [pc, #252]	; (8004234 <HAL_DMA_IRQHandler+0xa54>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a3d      	ldr	r2, [pc, #244]	; (8004238 <HAL_DMA_IRQHandler+0xa58>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3c      	ldr	r2, [pc, #240]	; (800423c <HAL_DMA_IRQHandler+0xa5c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a3a      	ldr	r2, [pc, #232]	; (8004240 <HAL_DMA_IRQHandler+0xa60>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a39      	ldr	r2, [pc, #228]	; (8004244 <HAL_DMA_IRQHandler+0xa64>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_DMA_IRQHandler+0x988>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_DMA_IRQHandler+0x98a>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 823f 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2204      	movs	r2, #4
 8004182:	409a      	lsls	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80cd 	beq.w	8004328 <HAL_DMA_IRQHandler+0xb48>
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80c7 	beq.w	8004328 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	2204      	movs	r2, #4
 80041a4:	409a      	lsls	r2, r3
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d049      	beq.n	8004248 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8210 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d0:	e20a      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8206 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041e4:	e200      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe08>
 80041e6:	bf00      	nop
 80041e8:	40020010 	.word	0x40020010
 80041ec:	40020028 	.word	0x40020028
 80041f0:	40020040 	.word	0x40020040
 80041f4:	40020058 	.word	0x40020058
 80041f8:	40020070 	.word	0x40020070
 80041fc:	40020088 	.word	0x40020088
 8004200:	400200a0 	.word	0x400200a0
 8004204:	400200b8 	.word	0x400200b8
 8004208:	40020410 	.word	0x40020410
 800420c:	40020428 	.word	0x40020428
 8004210:	40020440 	.word	0x40020440
 8004214:	40020458 	.word	0x40020458
 8004218:	40020470 	.word	0x40020470
 800421c:	40020488 	.word	0x40020488
 8004220:	400204a0 	.word	0x400204a0
 8004224:	400204b8 	.word	0x400204b8
 8004228:	58025408 	.word	0x58025408
 800422c:	5802541c 	.word	0x5802541c
 8004230:	58025430 	.word	0x58025430
 8004234:	58025444 	.word	0x58025444
 8004238:	58025458 	.word	0x58025458
 800423c:	5802546c 	.word	0x5802546c
 8004240:	58025480 	.word	0x58025480
 8004244:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d160      	bne.n	8004314 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a8c      	ldr	r2, [pc, #560]	; (8004488 <HAL_DMA_IRQHandler+0xca8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d04a      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a8a      	ldr	r2, [pc, #552]	; (800448c <HAL_DMA_IRQHandler+0xcac>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d045      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a89      	ldr	r2, [pc, #548]	; (8004490 <HAL_DMA_IRQHandler+0xcb0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d040      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a87      	ldr	r2, [pc, #540]	; (8004494 <HAL_DMA_IRQHandler+0xcb4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d03b      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a86      	ldr	r2, [pc, #536]	; (8004498 <HAL_DMA_IRQHandler+0xcb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d036      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a84      	ldr	r2, [pc, #528]	; (800449c <HAL_DMA_IRQHandler+0xcbc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d031      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a83      	ldr	r2, [pc, #524]	; (80044a0 <HAL_DMA_IRQHandler+0xcc0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d02c      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a81      	ldr	r2, [pc, #516]	; (80044a4 <HAL_DMA_IRQHandler+0xcc4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d027      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_DMA_IRQHandler+0xcc8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d022      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a7e      	ldr	r2, [pc, #504]	; (80044ac <HAL_DMA_IRQHandler+0xccc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01d      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_DMA_IRQHandler+0xcd0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a7b      	ldr	r2, [pc, #492]	; (80044b4 <HAL_DMA_IRQHandler+0xcd4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a7a      	ldr	r2, [pc, #488]	; (80044b8 <HAL_DMA_IRQHandler+0xcd8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a78      	ldr	r2, [pc, #480]	; (80044bc <HAL_DMA_IRQHandler+0xcdc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a77      	ldr	r2, [pc, #476]	; (80044c0 <HAL_DMA_IRQHandler+0xce0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a75      	ldr	r2, [pc, #468]	; (80044c4 <HAL_DMA_IRQHandler+0xce4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d108      	bne.n	8004304 <HAL_DMA_IRQHandler+0xb24>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0208 	bic.w	r2, r2, #8
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e007      	b.n	8004314 <HAL_DMA_IRQHandler+0xb34>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8165 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004326:	e15f      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2202      	movs	r2, #2
 8004332:	409a      	lsls	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80c5 	beq.w	80044c8 <HAL_DMA_IRQHandler+0xce8>
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80bf 	beq.w	80044c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2202      	movs	r2, #2
 8004354:	409a      	lsls	r2, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d018      	beq.n	8004396 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 813a 	beq.w	80045ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004380:	e134      	b.n	80045ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8130 	beq.w	80045ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004394:	e12a      	b.n	80045ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d168      	bne.n	8004472 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a38      	ldr	r2, [pc, #224]	; (8004488 <HAL_DMA_IRQHandler+0xca8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d04a      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a37      	ldr	r2, [pc, #220]	; (800448c <HAL_DMA_IRQHandler+0xcac>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d045      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a35      	ldr	r2, [pc, #212]	; (8004490 <HAL_DMA_IRQHandler+0xcb0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d040      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a34      	ldr	r2, [pc, #208]	; (8004494 <HAL_DMA_IRQHandler+0xcb4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d03b      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a32      	ldr	r2, [pc, #200]	; (8004498 <HAL_DMA_IRQHandler+0xcb8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d036      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a31      	ldr	r2, [pc, #196]	; (800449c <HAL_DMA_IRQHandler+0xcbc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d031      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <HAL_DMA_IRQHandler+0xcc0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02c      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2e      	ldr	r2, [pc, #184]	; (80044a4 <HAL_DMA_IRQHandler+0xcc4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d027      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <HAL_DMA_IRQHandler+0xcc8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d022      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_DMA_IRQHandler+0xccc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d01d      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <HAL_DMA_IRQHandler+0xcd0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d018      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <HAL_DMA_IRQHandler+0xcd4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d013      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <HAL_DMA_IRQHandler+0xcd8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00e      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a25      	ldr	r2, [pc, #148]	; (80044bc <HAL_DMA_IRQHandler+0xcdc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a23      	ldr	r2, [pc, #140]	; (80044c0 <HAL_DMA_IRQHandler+0xce0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_DMA_IRQHandler+0xc60>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_DMA_IRQHandler+0xce4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d108      	bne.n	8004452 <HAL_DMA_IRQHandler+0xc72>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0214 	bic.w	r2, r2, #20
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e007      	b.n	8004462 <HAL_DMA_IRQHandler+0xc82>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 020a 	bic.w	r2, r2, #10
 8004460:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80b8 	beq.w	80045ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004484:	e0b2      	b.n	80045ec <HAL_DMA_IRQHandler+0xe0c>
 8004486:	bf00      	nop
 8004488:	40020010 	.word	0x40020010
 800448c:	40020028 	.word	0x40020028
 8004490:	40020040 	.word	0x40020040
 8004494:	40020058 	.word	0x40020058
 8004498:	40020070 	.word	0x40020070
 800449c:	40020088 	.word	0x40020088
 80044a0:	400200a0 	.word	0x400200a0
 80044a4:	400200b8 	.word	0x400200b8
 80044a8:	40020410 	.word	0x40020410
 80044ac:	40020428 	.word	0x40020428
 80044b0:	40020440 	.word	0x40020440
 80044b4:	40020458 	.word	0x40020458
 80044b8:	40020470 	.word	0x40020470
 80044bc:	40020488 	.word	0x40020488
 80044c0:	400204a0 	.word	0x400204a0
 80044c4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	2208      	movs	r2, #8
 80044d2:	409a      	lsls	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8088 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8082 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a41      	ldr	r2, [pc, #260]	; (80045f4 <HAL_DMA_IRQHandler+0xe14>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d04a      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a3f      	ldr	r2, [pc, #252]	; (80045f8 <HAL_DMA_IRQHandler+0xe18>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d045      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a3e      	ldr	r2, [pc, #248]	; (80045fc <HAL_DMA_IRQHandler+0xe1c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d040      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3c      	ldr	r2, [pc, #240]	; (8004600 <HAL_DMA_IRQHandler+0xe20>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d03b      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a3b      	ldr	r2, [pc, #236]	; (8004604 <HAL_DMA_IRQHandler+0xe24>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d036      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a39      	ldr	r2, [pc, #228]	; (8004608 <HAL_DMA_IRQHandler+0xe28>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d031      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a38      	ldr	r2, [pc, #224]	; (800460c <HAL_DMA_IRQHandler+0xe2c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d02c      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a36      	ldr	r2, [pc, #216]	; (8004610 <HAL_DMA_IRQHandler+0xe30>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d027      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a35      	ldr	r2, [pc, #212]	; (8004614 <HAL_DMA_IRQHandler+0xe34>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a33      	ldr	r2, [pc, #204]	; (8004618 <HAL_DMA_IRQHandler+0xe38>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01d      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a32      	ldr	r2, [pc, #200]	; (800461c <HAL_DMA_IRQHandler+0xe3c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a30      	ldr	r2, [pc, #192]	; (8004620 <HAL_DMA_IRQHandler+0xe40>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2f      	ldr	r2, [pc, #188]	; (8004624 <HAL_DMA_IRQHandler+0xe44>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <HAL_DMA_IRQHandler+0xe48>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2c      	ldr	r2, [pc, #176]	; (800462c <HAL_DMA_IRQHandler+0xe4c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <HAL_DMA_IRQHandler+0xe50>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <HAL_DMA_IRQHandler+0xdbc>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 021c 	bic.w	r2, r2, #28
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e007      	b.n	80045ac <HAL_DMA_IRQHandler+0xdcc>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 020e 	bic.w	r2, r2, #14
 80045aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
 80045e2:	e004      	b.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80045e4:	bf00      	nop
 80045e6:	e002      	b.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e8:	bf00      	nop
 80045ea:	e000      	b.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045ee:	3728      	adds	r7, #40	; 0x28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40020010 	.word	0x40020010
 80045f8:	40020028 	.word	0x40020028
 80045fc:	40020040 	.word	0x40020040
 8004600:	40020058 	.word	0x40020058
 8004604:	40020070 	.word	0x40020070
 8004608:	40020088 	.word	0x40020088
 800460c:	400200a0 	.word	0x400200a0
 8004610:	400200b8 	.word	0x400200b8
 8004614:	40020410 	.word	0x40020410
 8004618:	40020428 	.word	0x40020428
 800461c:	40020440 	.word	0x40020440
 8004620:	40020458 	.word	0x40020458
 8004624:	40020470 	.word	0x40020470
 8004628:	40020488 	.word	0x40020488
 800462c:	400204a0 	.word	0x400204a0
 8004630:	400204b8 	.word	0x400204b8

08004634 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004646:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a84      	ldr	r2, [pc, #528]	; (8004864 <DMA_SetConfig+0x230>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d072      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a82      	ldr	r2, [pc, #520]	; (8004868 <DMA_SetConfig+0x234>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d06d      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a81      	ldr	r2, [pc, #516]	; (800486c <DMA_SetConfig+0x238>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d068      	beq.n	800473e <DMA_SetConfig+0x10a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a7f      	ldr	r2, [pc, #508]	; (8004870 <DMA_SetConfig+0x23c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d063      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7e      	ldr	r2, [pc, #504]	; (8004874 <DMA_SetConfig+0x240>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d05e      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7c      	ldr	r2, [pc, #496]	; (8004878 <DMA_SetConfig+0x244>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d059      	beq.n	800473e <DMA_SetConfig+0x10a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a7b      	ldr	r2, [pc, #492]	; (800487c <DMA_SetConfig+0x248>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d054      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a79      	ldr	r2, [pc, #484]	; (8004880 <DMA_SetConfig+0x24c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d04f      	beq.n	800473e <DMA_SetConfig+0x10a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a78      	ldr	r2, [pc, #480]	; (8004884 <DMA_SetConfig+0x250>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d04a      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a76      	ldr	r2, [pc, #472]	; (8004888 <DMA_SetConfig+0x254>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d045      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a75      	ldr	r2, [pc, #468]	; (800488c <DMA_SetConfig+0x258>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d040      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a73      	ldr	r2, [pc, #460]	; (8004890 <DMA_SetConfig+0x25c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d03b      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a72      	ldr	r2, [pc, #456]	; (8004894 <DMA_SetConfig+0x260>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d036      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a70      	ldr	r2, [pc, #448]	; (8004898 <DMA_SetConfig+0x264>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d031      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6f      	ldr	r2, [pc, #444]	; (800489c <DMA_SetConfig+0x268>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d02c      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a6d      	ldr	r2, [pc, #436]	; (80048a0 <DMA_SetConfig+0x26c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d027      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6c      	ldr	r2, [pc, #432]	; (80048a4 <DMA_SetConfig+0x270>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <DMA_SetConfig+0x10a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a6a      	ldr	r2, [pc, #424]	; (80048a8 <DMA_SetConfig+0x274>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01d      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a69      	ldr	r2, [pc, #420]	; (80048ac <DMA_SetConfig+0x278>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d018      	beq.n	800473e <DMA_SetConfig+0x10a>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a67      	ldr	r2, [pc, #412]	; (80048b0 <DMA_SetConfig+0x27c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a66      	ldr	r2, [pc, #408]	; (80048b4 <DMA_SetConfig+0x280>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a64      	ldr	r2, [pc, #400]	; (80048b8 <DMA_SetConfig+0x284>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d009      	beq.n	800473e <DMA_SetConfig+0x10a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a63      	ldr	r2, [pc, #396]	; (80048bc <DMA_SetConfig+0x288>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <DMA_SetConfig+0x10a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a61      	ldr	r2, [pc, #388]	; (80048c0 <DMA_SetConfig+0x28c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <DMA_SetConfig+0x10e>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <DMA_SetConfig+0x110>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004750:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004762:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a3e      	ldr	r2, [pc, #248]	; (8004864 <DMA_SetConfig+0x230>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d04a      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a3d      	ldr	r2, [pc, #244]	; (8004868 <DMA_SetConfig+0x234>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d045      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3b      	ldr	r2, [pc, #236]	; (800486c <DMA_SetConfig+0x238>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d040      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <DMA_SetConfig+0x23c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d03b      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a38      	ldr	r2, [pc, #224]	; (8004874 <DMA_SetConfig+0x240>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d036      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a37      	ldr	r2, [pc, #220]	; (8004878 <DMA_SetConfig+0x244>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d031      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a35      	ldr	r2, [pc, #212]	; (800487c <DMA_SetConfig+0x248>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02c      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a34      	ldr	r2, [pc, #208]	; (8004880 <DMA_SetConfig+0x24c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d027      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a32      	ldr	r2, [pc, #200]	; (8004884 <DMA_SetConfig+0x250>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d022      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a31      	ldr	r2, [pc, #196]	; (8004888 <DMA_SetConfig+0x254>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d01d      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2f      	ldr	r2, [pc, #188]	; (800488c <DMA_SetConfig+0x258>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d018      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2e      	ldr	r2, [pc, #184]	; (8004890 <DMA_SetConfig+0x25c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <DMA_SetConfig+0x260>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00e      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2b      	ldr	r2, [pc, #172]	; (8004898 <DMA_SetConfig+0x264>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d009      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a29      	ldr	r2, [pc, #164]	; (800489c <DMA_SetConfig+0x268>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <DMA_SetConfig+0x1d0>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a28      	ldr	r2, [pc, #160]	; (80048a0 <DMA_SetConfig+0x26c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d101      	bne.n	8004808 <DMA_SetConfig+0x1d4>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <DMA_SetConfig+0x1d6>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d05a      	beq.n	80048c4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	223f      	movs	r2, #63	; 0x3f
 8004818:	409a      	lsls	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800482c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d108      	bne.n	8004850 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800484e:	e087      	b.n	8004960 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]
}
 8004860:	e07e      	b.n	8004960 <DMA_SetConfig+0x32c>
 8004862:	bf00      	nop
 8004864:	40020010 	.word	0x40020010
 8004868:	40020028 	.word	0x40020028
 800486c:	40020040 	.word	0x40020040
 8004870:	40020058 	.word	0x40020058
 8004874:	40020070 	.word	0x40020070
 8004878:	40020088 	.word	0x40020088
 800487c:	400200a0 	.word	0x400200a0
 8004880:	400200b8 	.word	0x400200b8
 8004884:	40020410 	.word	0x40020410
 8004888:	40020428 	.word	0x40020428
 800488c:	40020440 	.word	0x40020440
 8004890:	40020458 	.word	0x40020458
 8004894:	40020470 	.word	0x40020470
 8004898:	40020488 	.word	0x40020488
 800489c:	400204a0 	.word	0x400204a0
 80048a0:	400204b8 	.word	0x400204b8
 80048a4:	58025408 	.word	0x58025408
 80048a8:	5802541c 	.word	0x5802541c
 80048ac:	58025430 	.word	0x58025430
 80048b0:	58025444 	.word	0x58025444
 80048b4:	58025458 	.word	0x58025458
 80048b8:	5802546c 	.word	0x5802546c
 80048bc:	58025480 	.word	0x58025480
 80048c0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a28      	ldr	r2, [pc, #160]	; (800496c <DMA_SetConfig+0x338>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d022      	beq.n	8004914 <DMA_SetConfig+0x2e0>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a27      	ldr	r2, [pc, #156]	; (8004970 <DMA_SetConfig+0x33c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d01d      	beq.n	8004914 <DMA_SetConfig+0x2e0>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <DMA_SetConfig+0x340>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d018      	beq.n	8004914 <DMA_SetConfig+0x2e0>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a24      	ldr	r2, [pc, #144]	; (8004978 <DMA_SetConfig+0x344>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <DMA_SetConfig+0x2e0>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a22      	ldr	r2, [pc, #136]	; (800497c <DMA_SetConfig+0x348>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00e      	beq.n	8004914 <DMA_SetConfig+0x2e0>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a21      	ldr	r2, [pc, #132]	; (8004980 <DMA_SetConfig+0x34c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <DMA_SetConfig+0x2e0>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <DMA_SetConfig+0x350>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <DMA_SetConfig+0x2e0>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <DMA_SetConfig+0x354>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <DMA_SetConfig+0x2e4>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <DMA_SetConfig+0x2e6>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d020      	beq.n	8004960 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	2201      	movs	r2, #1
 8004928:	409a      	lsls	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d108      	bne.n	8004950 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	60da      	str	r2, [r3, #12]
}
 800494e:	e007      	b.n	8004960 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	60da      	str	r2, [r3, #12]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	58025408 	.word	0x58025408
 8004970:	5802541c 	.word	0x5802541c
 8004974:	58025430 	.word	0x58025430
 8004978:	58025444 	.word	0x58025444
 800497c:	58025458 	.word	0x58025458
 8004980:	5802546c 	.word	0x5802546c
 8004984:	58025480 	.word	0x58025480
 8004988:	58025494 	.word	0x58025494

0800498c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a42      	ldr	r2, [pc, #264]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x118>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d04a      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a41      	ldr	r2, [pc, #260]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x11c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d045      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a3f      	ldr	r2, [pc, #252]	; (8004aac <DMA_CalcBaseAndBitshift+0x120>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d040      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a3e      	ldr	r2, [pc, #248]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d03b      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3c      	ldr	r2, [pc, #240]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x128>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d036      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3b      	ldr	r2, [pc, #236]	; (8004ab8 <DMA_CalcBaseAndBitshift+0x12c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d031      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a39      	ldr	r2, [pc, #228]	; (8004abc <DMA_CalcBaseAndBitshift+0x130>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d02c      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a38      	ldr	r2, [pc, #224]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x134>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d027      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a36      	ldr	r2, [pc, #216]	; (8004ac4 <DMA_CalcBaseAndBitshift+0x138>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d022      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a35      	ldr	r2, [pc, #212]	; (8004ac8 <DMA_CalcBaseAndBitshift+0x13c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d01d      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a33      	ldr	r2, [pc, #204]	; (8004acc <DMA_CalcBaseAndBitshift+0x140>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a32      	ldr	r2, [pc, #200]	; (8004ad0 <DMA_CalcBaseAndBitshift+0x144>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a30      	ldr	r2, [pc, #192]	; (8004ad4 <DMA_CalcBaseAndBitshift+0x148>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ad8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2d      	ldr	r2, [pc, #180]	; (8004adc <DMA_CalcBaseAndBitshift+0x150>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xa8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ae0 <DMA_CalcBaseAndBitshift+0x154>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d101      	bne.n	8004a38 <DMA_CalcBaseAndBitshift+0xac>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <DMA_CalcBaseAndBitshift+0xae>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d024      	beq.n	8004a88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3b10      	subs	r3, #16
 8004a46:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <DMA_CalcBaseAndBitshift+0x158>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a58:	5cd3      	ldrb	r3, [r2, r3]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d908      	bls.n	8004a78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4b1f      	ldr	r3, [pc, #124]	; (8004aec <DMA_CalcBaseAndBitshift+0x160>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	1d1a      	adds	r2, r3, #4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	659a      	str	r2, [r3, #88]	; 0x58
 8004a76:	e00d      	b.n	8004a94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <DMA_CalcBaseAndBitshift+0x160>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6593      	str	r3, [r2, #88]	; 0x58
 8004a86:	e005      	b.n	8004a94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40020010 	.word	0x40020010
 8004aa8:	40020028 	.word	0x40020028
 8004aac:	40020040 	.word	0x40020040
 8004ab0:	40020058 	.word	0x40020058
 8004ab4:	40020070 	.word	0x40020070
 8004ab8:	40020088 	.word	0x40020088
 8004abc:	400200a0 	.word	0x400200a0
 8004ac0:	400200b8 	.word	0x400200b8
 8004ac4:	40020410 	.word	0x40020410
 8004ac8:	40020428 	.word	0x40020428
 8004acc:	40020440 	.word	0x40020440
 8004ad0:	40020458 	.word	0x40020458
 8004ad4:	40020470 	.word	0x40020470
 8004ad8:	40020488 	.word	0x40020488
 8004adc:	400204a0 	.word	0x400204a0
 8004ae0:	400204b8 	.word	0x400204b8
 8004ae4:	aaaaaaab 	.word	0xaaaaaaab
 8004ae8:	080085ac 	.word	0x080085ac
 8004aec:	fffffc00 	.word	0xfffffc00

08004af0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d120      	bne.n	8004b46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d858      	bhi.n	8004bbe <DMA_CheckFifoParam+0xce>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <DMA_CheckFifoParam+0x24>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b37 	.word	0x08004b37
 8004b1c:	08004b25 	.word	0x08004b25
 8004b20:	08004bbf 	.word	0x08004bbf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d048      	beq.n	8004bc2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b34:	e045      	b.n	8004bc2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b3e:	d142      	bne.n	8004bc6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b44:	e03f      	b.n	8004bc6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4e:	d123      	bne.n	8004b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d838      	bhi.n	8004bca <DMA_CheckFifoParam+0xda>
 8004b58:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <DMA_CheckFifoParam+0x70>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b77 	.word	0x08004b77
 8004b68:	08004b71 	.word	0x08004b71
 8004b6c:	08004b89 	.word	0x08004b89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
        break;
 8004b74:	e030      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d025      	beq.n	8004bce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b86:	e022      	b.n	8004bce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b90:	d11f      	bne.n	8004bd2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b96:	e01c      	b.n	8004bd2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d902      	bls.n	8004ba6 <DMA_CheckFifoParam+0xb6>
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d003      	beq.n	8004bac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ba4:	e018      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8004baa:	e015      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00e      	beq.n	8004bd6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
    break;
 8004bbc:	e00b      	b.n	8004bd6 <DMA_CheckFifoParam+0xe6>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e00a      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e008      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e006      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8004bca:	bf00      	nop
 8004bcc:	e004      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8004bce:	bf00      	nop
 8004bd0:	e002      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8004bd2:	bf00      	nop
 8004bd4:	e000      	b.n	8004bd8 <DMA_CheckFifoParam+0xe8>
    break;
 8004bd6:	bf00      	nop
    }
  }

  return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop

08004be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a38      	ldr	r2, [pc, #224]	; (8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a36      	ldr	r2, [pc, #216]	; (8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01d      	beq.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a35      	ldr	r2, [pc, #212]	; (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a33      	ldr	r2, [pc, #204]	; (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a32      	ldr	r2, [pc, #200]	; (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2f      	ldr	r2, [pc, #188]	; (8004cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2d      	ldr	r2, [pc, #180]	; (8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01a      	beq.n	8004c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	3b08      	subs	r3, #8
 8004c58:	4a28      	ldr	r2, [pc, #160]	; (8004cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c84:	e024      	b.n	8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	3b10      	subs	r3, #16
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d806      	bhi.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d902      	bls.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3308      	adds	r3, #8
 8004cac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004cc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	2201      	movs	r2, #1
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	58025408 	.word	0x58025408
 8004ce0:	5802541c 	.word	0x5802541c
 8004ce4:	58025430 	.word	0x58025430
 8004ce8:	58025444 	.word	0x58025444
 8004cec:	58025458 	.word	0x58025458
 8004cf0:	5802546c 	.word	0x5802546c
 8004cf4:	58025480 	.word	0x58025480
 8004cf8:	58025494 	.word	0x58025494
 8004cfc:	cccccccd 	.word	0xcccccccd
 8004d00:	16009600 	.word	0x16009600
 8004d04:	58025880 	.word	0x58025880
 8004d08:	aaaaaaab 	.word	0xaaaaaaab
 8004d0c:	400204b8 	.word	0x400204b8
 8004d10:	4002040f 	.word	0x4002040f
 8004d14:	10008200 	.word	0x10008200
 8004d18:	40020880 	.word	0x40020880

08004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d04a      	beq.n	8004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d847      	bhi.n	8004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d022      	beq.n	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a24      	ldr	r2, [pc, #144]	; (8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d01d      	beq.n	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d018      	beq.n	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00e      	beq.n	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d009      	beq.n	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004da4:	671a      	str	r2, [r3, #112]	; 0x70
 8004da6:	e009      	b.n	8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	461a      	mov	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a11      	ldr	r2, [pc, #68]	; (8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004dba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	58025408 	.word	0x58025408
 8004dd8:	5802541c 	.word	0x5802541c
 8004ddc:	58025430 	.word	0x58025430
 8004de0:	58025444 	.word	0x58025444
 8004de4:	58025458 	.word	0x58025458
 8004de8:	5802546c 	.word	0x5802546c
 8004dec:	58025480 	.word	0x58025480
 8004df0:	58025494 	.word	0x58025494
 8004df4:	1600963f 	.word	0x1600963f
 8004df8:	58025940 	.word	0x58025940
 8004dfc:	1000823f 	.word	0x1000823f
 8004e00:	40020940 	.word	0x40020940

08004e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b089      	sub	sp, #36	; 0x24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e12:	4b89      	ldr	r3, [pc, #548]	; (8005038 <HAL_GPIO_Init+0x234>)
 8004e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e16:	e194      	b.n	8005142 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	fa01 f303 	lsl.w	r3, r1, r3
 8004e24:	4013      	ands	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8186 	beq.w	800513c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d00b      	beq.n	8004e50 <HAL_GPIO_Init+0x4c>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d007      	beq.n	8004e50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e44:	2b11      	cmp	r3, #17
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b12      	cmp	r3, #18
 8004e4e:	d130      	bne.n	8004eb2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e86:	2201      	movs	r2, #1
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0201 	and.w	r2, r3, #1
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d003      	beq.n	8004ef2 <HAL_GPIO_Init+0xee>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b12      	cmp	r3, #18
 8004ef0:	d123      	bne.n	8004f3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	08da      	lsrs	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3208      	adds	r2, #8
 8004efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	220f      	movs	r2, #15
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	08da      	lsrs	r2, r3, #3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3208      	adds	r2, #8
 8004f34:	69b9      	ldr	r1, [r7, #24]
 8004f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	2203      	movs	r2, #3
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 0203 	and.w	r2, r3, #3
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80e0 	beq.w	800513c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f7c:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_GPIO_Init+0x238>)
 8004f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f82:	4a2e      	ldr	r2, [pc, #184]	; (800503c <HAL_GPIO_Init+0x238>)
 8004f84:	f043 0302 	orr.w	r3, r3, #2
 8004f88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_GPIO_Init+0x238>)
 8004f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f9a:	4a29      	ldr	r2, [pc, #164]	; (8005040 <HAL_GPIO_Init+0x23c>)
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	220f      	movs	r2, #15
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a20      	ldr	r2, [pc, #128]	; (8005044 <HAL_GPIO_Init+0x240>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d052      	beq.n	800506c <HAL_GPIO_Init+0x268>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_GPIO_Init+0x244>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d031      	beq.n	8005032 <HAL_GPIO_Init+0x22e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_GPIO_Init+0x248>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02b      	beq.n	800502e <HAL_GPIO_Init+0x22a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_GPIO_Init+0x24c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d025      	beq.n	800502a <HAL_GPIO_Init+0x226>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <HAL_GPIO_Init+0x250>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01f      	beq.n	8005026 <HAL_GPIO_Init+0x222>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <HAL_GPIO_Init+0x254>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d019      	beq.n	8005022 <HAL_GPIO_Init+0x21e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1a      	ldr	r2, [pc, #104]	; (800505c <HAL_GPIO_Init+0x258>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_GPIO_Init+0x21a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a19      	ldr	r2, [pc, #100]	; (8005060 <HAL_GPIO_Init+0x25c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00d      	beq.n	800501a <HAL_GPIO_Init+0x216>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a18      	ldr	r2, [pc, #96]	; (8005064 <HAL_GPIO_Init+0x260>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <HAL_GPIO_Init+0x212>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a17      	ldr	r2, [pc, #92]	; (8005068 <HAL_GPIO_Init+0x264>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d101      	bne.n	8005012 <HAL_GPIO_Init+0x20e>
 800500e:	2309      	movs	r3, #9
 8005010:	e02d      	b.n	800506e <HAL_GPIO_Init+0x26a>
 8005012:	230a      	movs	r3, #10
 8005014:	e02b      	b.n	800506e <HAL_GPIO_Init+0x26a>
 8005016:	2308      	movs	r3, #8
 8005018:	e029      	b.n	800506e <HAL_GPIO_Init+0x26a>
 800501a:	2307      	movs	r3, #7
 800501c:	e027      	b.n	800506e <HAL_GPIO_Init+0x26a>
 800501e:	2306      	movs	r3, #6
 8005020:	e025      	b.n	800506e <HAL_GPIO_Init+0x26a>
 8005022:	2305      	movs	r3, #5
 8005024:	e023      	b.n	800506e <HAL_GPIO_Init+0x26a>
 8005026:	2304      	movs	r3, #4
 8005028:	e021      	b.n	800506e <HAL_GPIO_Init+0x26a>
 800502a:	2303      	movs	r3, #3
 800502c:	e01f      	b.n	800506e <HAL_GPIO_Init+0x26a>
 800502e:	2302      	movs	r3, #2
 8005030:	e01d      	b.n	800506e <HAL_GPIO_Init+0x26a>
 8005032:	2301      	movs	r3, #1
 8005034:	e01b      	b.n	800506e <HAL_GPIO_Init+0x26a>
 8005036:	bf00      	nop
 8005038:	58000080 	.word	0x58000080
 800503c:	58024400 	.word	0x58024400
 8005040:	58000400 	.word	0x58000400
 8005044:	58020000 	.word	0x58020000
 8005048:	58020400 	.word	0x58020400
 800504c:	58020800 	.word	0x58020800
 8005050:	58020c00 	.word	0x58020c00
 8005054:	58021000 	.word	0x58021000
 8005058:	58021400 	.word	0x58021400
 800505c:	58021800 	.word	0x58021800
 8005060:	58021c00 	.word	0x58021c00
 8005064:	58022000 	.word	0x58022000
 8005068:	58022400 	.word	0x58022400
 800506c:	2300      	movs	r3, #0
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	f002 0203 	and.w	r2, r2, #3
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	4093      	lsls	r3, r2
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800507e:	4938      	ldr	r1, [pc, #224]	; (8005160 <HAL_GPIO_Init+0x35c>)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	43db      	mvns	r3, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	3301      	adds	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	f47f ae63 	bne.w	8004e18 <HAL_GPIO_Init+0x14>
  }
}
 8005152:	bf00      	nop
 8005154:	3724      	adds	r7, #36	; 0x24
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	58000400 	.word	0x58000400

08005164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
 8005170:	4613      	mov	r3, r2
 8005172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005174:	787b      	ldrb	r3, [r7, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005180:	e003      	b.n	800518a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	041a      	lsls	r2, r3, #16
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	619a      	str	r2, [r3, #24]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <HAL_HSEM_FastTake+0x2c>)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3320      	adds	r3, #32
 80051a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051aa:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <HAL_HSEM_FastTake+0x30>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	58026400 	.word	0x58026400
 80051c8:	80000300 	.word	0x80000300

080051cc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80051d6:	4906      	ldr	r1, [pc, #24]	; (80051f0 <HAL_HSEM_Release+0x24>)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	58026400 	.word	0x58026400

080051f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80051fc:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	2b06      	cmp	r3, #6
 8005206:	d00a      	beq.n	800521e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005208:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d001      	beq.n	800521a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e040      	b.n	800529c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e03e      	b.n	800529c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800521e:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005226:	491f      	ldr	r1, [pc, #124]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4313      	orrs	r3, r2
 800522c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800522e:	f7fb ff9f 	bl	8001170 <HAL_GetTick>
 8005232:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005234:	e009      	b.n	800524a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005236:	f7fb ff9b 	bl	8001170 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005244:	d901      	bls.n	800524a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e028      	b.n	800529c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800524a:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005256:	d1ee      	bne.n	8005236 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b1e      	cmp	r3, #30
 800525c:	d008      	beq.n	8005270 <HAL_PWREx_ConfigSupply+0x7c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b2e      	cmp	r3, #46	; 0x2e
 8005262:	d005      	beq.n	8005270 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b1d      	cmp	r3, #29
 8005268:	d002      	beq.n	8005270 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b2d      	cmp	r3, #45	; 0x2d
 800526e:	d114      	bne.n	800529a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005270:	f7fb ff7e 	bl	8001170 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005276:	e009      	b.n	800528c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005278:	f7fb ff7a 	bl	8001170 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005286:	d901      	bls.n	800528c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e007      	b.n	800529c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005298:	d1ee      	bne.n	8005278 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	58024800 	.word	0x58024800

080052a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08c      	sub	sp, #48	; 0x30
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e3ff      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8087 	beq.w	80053d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052c8:	4b99      	ldr	r3, [pc, #612]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052d2:	4b97      	ldr	r3, [pc, #604]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d007      	beq.n	80052ee <HAL_RCC_OscConfig+0x46>
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	2b18      	cmp	r3, #24
 80052e2:	d110      	bne.n	8005306 <HAL_RCC_OscConfig+0x5e>
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d10b      	bne.n	8005306 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ee:	4b90      	ldr	r3, [pc, #576]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d06c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x12c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d168      	bne.n	80053d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e3d9      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x76>
 8005310:	4b87      	ldr	r3, [pc, #540]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a86      	ldr	r2, [pc, #536]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e02e      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <HAL_RCC_OscConfig+0x98>
 8005326:	4b82      	ldr	r3, [pc, #520]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a81      	ldr	r2, [pc, #516]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800532c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	4b7f      	ldr	r3, [pc, #508]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a7e      	ldr	r2, [pc, #504]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e01d      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0xbc>
 800534a:	4b79      	ldr	r3, [pc, #484]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a78      	ldr	r2, [pc, #480]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b76      	ldr	r3, [pc, #472]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a75      	ldr	r2, [pc, #468]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 8005364:	4b72      	ldr	r3, [pc, #456]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a71      	ldr	r2, [pc, #452]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b6f      	ldr	r3, [pc, #444]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a6e      	ldr	r2, [pc, #440]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fb fef4 	bl	8001170 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538c:	f7fb fef0 	bl	8001170 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e38d      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800539e:	4b64      	ldr	r3, [pc, #400]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xe4>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fb fee0 	bl	8001170 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fb fedc 	bl	8001170 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e379      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053c6:	4b5a      	ldr	r3, [pc, #360]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x10c>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 80ae 	beq.w	8005540 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e4:	4b52      	ldr	r3, [pc, #328]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053ee:	4b50      	ldr	r3, [pc, #320]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_RCC_OscConfig+0x162>
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	2b18      	cmp	r3, #24
 80053fe:	d13a      	bne.n	8005476 <HAL_RCC_OscConfig+0x1ce>
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d135      	bne.n	8005476 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800540a:	4b49      	ldr	r3, [pc, #292]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_RCC_OscConfig+0x17a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e34b      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005422:	f7fb fed3 	bl	80011cc <HAL_GetREVID>
 8005426:	4602      	mov	r2, r0
 8005428:	f241 0303 	movw	r3, #4099	; 0x1003
 800542c:	429a      	cmp	r2, r3
 800542e:	d817      	bhi.n	8005460 <HAL_RCC_OscConfig+0x1b8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d108      	bne.n	800544a <HAL_RCC_OscConfig+0x1a2>
 8005438:	4b3d      	ldr	r3, [pc, #244]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005440:	4a3b      	ldr	r2, [pc, #236]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005446:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005448:	e07a      	b.n	8005540 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544a:	4b39      	ldr	r3, [pc, #228]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	031b      	lsls	r3, r3, #12
 8005458:	4935      	ldr	r1, [pc, #212]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800545e:	e06f      	b.n	8005540 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005460:	4b33      	ldr	r3, [pc, #204]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	061b      	lsls	r3, r3, #24
 800546e:	4930      	ldr	r1, [pc, #192]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005470:	4313      	orrs	r3, r2
 8005472:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005474:	e064      	b.n	8005540 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d045      	beq.n	800550a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800547e:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 0219 	bic.w	r2, r3, #25
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4929      	ldr	r1, [pc, #164]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800548c:	4313      	orrs	r3, r2
 800548e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fb fe6e 	bl	8001170 <HAL_GetTick>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005498:	f7fb fe6a 	bl	8001170 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e307      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b6:	f7fb fe89 	bl	80011cc <HAL_GetREVID>
 80054ba:	4602      	mov	r2, r0
 80054bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d817      	bhi.n	80054f4 <HAL_RCC_OscConfig+0x24c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d108      	bne.n	80054de <HAL_RCC_OscConfig+0x236>
 80054cc:	4b18      	ldr	r3, [pc, #96]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054d4:	4a16      	ldr	r2, [pc, #88]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80054d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054da:	6053      	str	r3, [r2, #4]
 80054dc:	e030      	b.n	8005540 <HAL_RCC_OscConfig+0x298>
 80054de:	4b14      	ldr	r3, [pc, #80]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	031b      	lsls	r3, r3, #12
 80054ec:	4910      	ldr	r1, [pc, #64]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	604b      	str	r3, [r1, #4]
 80054f2:	e025      	b.n	8005540 <HAL_RCC_OscConfig+0x298>
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	061b      	lsls	r3, r3, #24
 8005502:	490b      	ldr	r1, [pc, #44]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005504:	4313      	orrs	r3, r2
 8005506:	604b      	str	r3, [r1, #4]
 8005508:	e01a      	b.n	8005540 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a08      	ldr	r2, [pc, #32]	; (8005530 <HAL_RCC_OscConfig+0x288>)
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005516:	f7fb fe2b 	bl	8001170 <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800551c:	e00a      	b.n	8005534 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551e:	f7fb fe27 	bl	8001170 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d903      	bls.n	8005534 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e2c4      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
 8005530:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005534:	4ba4      	ldr	r3, [pc, #656]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1ee      	bne.n	800551e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80a9 	beq.w	80056a0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800554e:	4b9e      	ldr	r3, [pc, #632]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005556:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005558:	4b9b      	ldr	r3, [pc, #620]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d007      	beq.n	8005574 <HAL_RCC_OscConfig+0x2cc>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b18      	cmp	r3, #24
 8005568:	d13a      	bne.n	80055e0 <HAL_RCC_OscConfig+0x338>
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d135      	bne.n	80055e0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005574:	4b94      	ldr	r3, [pc, #592]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_RCC_OscConfig+0x2e4>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d001      	beq.n	800558c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e296      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800558c:	f7fb fe1e 	bl	80011cc <HAL_GetREVID>
 8005590:	4602      	mov	r2, r0
 8005592:	f241 0303 	movw	r3, #4099	; 0x1003
 8005596:	429a      	cmp	r2, r3
 8005598:	d817      	bhi.n	80055ca <HAL_RCC_OscConfig+0x322>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d108      	bne.n	80055b4 <HAL_RCC_OscConfig+0x30c>
 80055a2:	4b89      	ldr	r3, [pc, #548]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055aa:	4a87      	ldr	r2, [pc, #540]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80055ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055b2:	e075      	b.n	80056a0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055b4:	4b84      	ldr	r3, [pc, #528]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	069b      	lsls	r3, r3, #26
 80055c2:	4981      	ldr	r1, [pc, #516]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055c8:	e06a      	b.n	80056a0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ca:	4b7f      	ldr	r3, [pc, #508]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	061b      	lsls	r3, r3, #24
 80055d8:	497b      	ldr	r1, [pc, #492]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055de:	e05f      	b.n	80056a0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d042      	beq.n	800566e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055e8:	4b77      	ldr	r3, [pc, #476]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a76      	ldr	r2, [pc, #472]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fb fdbc 	bl	8001170 <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055fc:	f7fb fdb8 	bl	8001170 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e255      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800560e:	4b6e      	ldr	r3, [pc, #440]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800561a:	f7fb fdd7 	bl	80011cc <HAL_GetREVID>
 800561e:	4602      	mov	r2, r0
 8005620:	f241 0303 	movw	r3, #4099	; 0x1003
 8005624:	429a      	cmp	r2, r3
 8005626:	d817      	bhi.n	8005658 <HAL_RCC_OscConfig+0x3b0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	2b20      	cmp	r3, #32
 800562e:	d108      	bne.n	8005642 <HAL_RCC_OscConfig+0x39a>
 8005630:	4b65      	ldr	r3, [pc, #404]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005638:	4a63      	ldr	r2, [pc, #396]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 800563a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800563e:	6053      	str	r3, [r2, #4]
 8005640:	e02e      	b.n	80056a0 <HAL_RCC_OscConfig+0x3f8>
 8005642:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	069b      	lsls	r3, r3, #26
 8005650:	495d      	ldr	r1, [pc, #372]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005652:	4313      	orrs	r3, r2
 8005654:	604b      	str	r3, [r1, #4]
 8005656:	e023      	b.n	80056a0 <HAL_RCC_OscConfig+0x3f8>
 8005658:	4b5b      	ldr	r3, [pc, #364]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	061b      	lsls	r3, r3, #24
 8005666:	4958      	ldr	r1, [pc, #352]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005668:	4313      	orrs	r3, r2
 800566a:	60cb      	str	r3, [r1, #12]
 800566c:	e018      	b.n	80056a0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800566e:	4b56      	ldr	r3, [pc, #344]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a55      	ldr	r2, [pc, #340]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567a:	f7fb fd79 	bl	8001170 <HAL_GetTick>
 800567e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005682:	f7fb fd75 	bl	8001170 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e212      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005694:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1f0      	bne.n	8005682 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d036      	beq.n	800571a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d019      	beq.n	80056e8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b4:	4b44      	ldr	r3, [pc, #272]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80056b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b8:	4a43      	ldr	r2, [pc, #268]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c0:	f7fb fd56 	bl	8001170 <HAL_GetTick>
 80056c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c8:	f7fb fd52 	bl	8001170 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e1ef      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056da:	4b3b      	ldr	r3, [pc, #236]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80056dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x420>
 80056e6:	e018      	b.n	800571a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e8:	4b37      	ldr	r3, [pc, #220]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80056ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ec:	4a36      	ldr	r2, [pc, #216]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f4:	f7fb fd3c 	bl	8001170 <HAL_GetTick>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056fc:	f7fb fd38 	bl	8001170 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1d5      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d036      	beq.n	8005794 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d019      	beq.n	8005762 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800572e:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a25      	ldr	r2, [pc, #148]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005738:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800573a:	f7fb fd19 	bl	8001170 <HAL_GetTick>
 800573e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005742:	f7fb fd15 	bl	8001170 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e1b2      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005754:	4b1c      	ldr	r3, [pc, #112]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x49a>
 8005760:	e018      	b.n	8005794 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005762:	4b19      	ldr	r3, [pc, #100]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 8005768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800576c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800576e:	f7fb fcff 	bl	8001170 <HAL_GetTick>
 8005772:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005776:	f7fb fcfb 	bl	8001170 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e198      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005788:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <HAL_RCC_OscConfig+0x520>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8085 	beq.w	80058ac <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_RCC_OscConfig+0x524>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_RCC_OscConfig+0x524>)
 80057a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ae:	f7fb fcdf 	bl	8001170 <HAL_GetTick>
 80057b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b4:	e00c      	b.n	80057d0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057b6:	f7fb fcdb 	bl	8001170 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b64      	cmp	r3, #100	; 0x64
 80057c2:	d905      	bls.n	80057d0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e178      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
 80057c8:	58024400 	.word	0x58024400
 80057cc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d0:	4b96      	ldr	r3, [pc, #600]	; (8005a2c <HAL_RCC_OscConfig+0x784>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ec      	beq.n	80057b6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d106      	bne.n	80057f2 <HAL_RCC_OscConfig+0x54a>
 80057e4:	4b92      	ldr	r3, [pc, #584]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	4a91      	ldr	r2, [pc, #580]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	6713      	str	r3, [r2, #112]	; 0x70
 80057f0:	e02d      	b.n	800584e <HAL_RCC_OscConfig+0x5a6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10c      	bne.n	8005814 <HAL_RCC_OscConfig+0x56c>
 80057fa:	4b8d      	ldr	r3, [pc, #564]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	4a8c      	ldr	r2, [pc, #560]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	6713      	str	r3, [r2, #112]	; 0x70
 8005806:	4b8a      	ldr	r3, [pc, #552]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	4a89      	ldr	r2, [pc, #548]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800580c:	f023 0304 	bic.w	r3, r3, #4
 8005810:	6713      	str	r3, [r2, #112]	; 0x70
 8005812:	e01c      	b.n	800584e <HAL_RCC_OscConfig+0x5a6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b05      	cmp	r3, #5
 800581a:	d10c      	bne.n	8005836 <HAL_RCC_OscConfig+0x58e>
 800581c:	4b84      	ldr	r3, [pc, #528]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	4a83      	ldr	r2, [pc, #524]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005822:	f043 0304 	orr.w	r3, r3, #4
 8005826:	6713      	str	r3, [r2, #112]	; 0x70
 8005828:	4b81      	ldr	r3, [pc, #516]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	4a80      	ldr	r2, [pc, #512]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	6713      	str	r3, [r2, #112]	; 0x70
 8005834:	e00b      	b.n	800584e <HAL_RCC_OscConfig+0x5a6>
 8005836:	4b7e      	ldr	r3, [pc, #504]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	4a7d      	ldr	r2, [pc, #500]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	6713      	str	r3, [r2, #112]	; 0x70
 8005842:	4b7b      	ldr	r3, [pc, #492]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4a7a      	ldr	r2, [pc, #488]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005848:	f023 0304 	bic.w	r3, r3, #4
 800584c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d015      	beq.n	8005882 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7fb fc8b 	bl	8001170 <HAL_GetTick>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800585c:	e00a      	b.n	8005874 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800585e:	f7fb fc87 	bl	8001170 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	f241 3288 	movw	r2, #5000	; 0x1388
 800586c:	4293      	cmp	r3, r2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e122      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005874:	4b6e      	ldr	r3, [pc, #440]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0ee      	beq.n	800585e <HAL_RCC_OscConfig+0x5b6>
 8005880:	e014      	b.n	80058ac <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005882:	f7fb fc75 	bl	8001170 <HAL_GetTick>
 8005886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005888:	e00a      	b.n	80058a0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fb fc71 	bl	8001170 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f241 3288 	movw	r2, #5000	; 0x1388
 8005898:	4293      	cmp	r3, r2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e10c      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058a0:	4b63      	ldr	r3, [pc, #396]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1ee      	bne.n	800588a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8101 	beq.w	8005ab8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058b6:	4b5e      	ldr	r3, [pc, #376]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058be:	2b18      	cmp	r3, #24
 80058c0:	f000 80bc 	beq.w	8005a3c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	f040 8095 	bne.w	80059f8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ce:	4b58      	ldr	r3, [pc, #352]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a57      	ldr	r2, [pc, #348]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80058d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fb fc49 	bl	8001170 <HAL_GetTick>
 80058de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e2:	f7fb fc45 	bl	8001170 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e0e2      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058f4:	4b4e      	ldr	r3, [pc, #312]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f0      	bne.n	80058e2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005900:	4b4b      	ldr	r3, [pc, #300]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005904:	4b4b      	ldr	r3, [pc, #300]	; (8005a34 <HAL_RCC_OscConfig+0x78c>)
 8005906:	4013      	ands	r3, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005910:	0112      	lsls	r2, r2, #4
 8005912:	430a      	orrs	r2, r1
 8005914:	4946      	ldr	r1, [pc, #280]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005916:	4313      	orrs	r3, r2
 8005918:	628b      	str	r3, [r1, #40]	; 0x28
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	3b01      	subs	r3, #1
 8005920:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	3b01      	subs	r3, #1
 800592a:	025b      	lsls	r3, r3, #9
 800592c:	b29b      	uxth	r3, r3
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	3b01      	subs	r3, #1
 8005936:	041b      	lsls	r3, r3, #16
 8005938:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	3b01      	subs	r3, #1
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800594a:	4939      	ldr	r1, [pc, #228]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800594c:	4313      	orrs	r3, r2
 800594e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005950:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	4a36      	ldr	r2, [pc, #216]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800595c:	4b34      	ldr	r3, [pc, #208]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800595e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005960:	4b35      	ldr	r3, [pc, #212]	; (8005a38 <HAL_RCC_OscConfig+0x790>)
 8005962:	4013      	ands	r3, r2
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005968:	00d2      	lsls	r2, r2, #3
 800596a:	4931      	ldr	r1, [pc, #196]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800596c:	4313      	orrs	r3, r2
 800596e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005970:	4b2f      	ldr	r3, [pc, #188]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	f023 020c 	bic.w	r2, r3, #12
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	492c      	ldr	r1, [pc, #176]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800597e:	4313      	orrs	r3, r2
 8005980:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005982:	4b2b      	ldr	r3, [pc, #172]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	f023 0202 	bic.w	r2, r3, #2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	4928      	ldr	r1, [pc, #160]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005990:	4313      	orrs	r3, r2
 8005992:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005994:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	4a25      	ldr	r2, [pc, #148]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 800599a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a0:	4b23      	ldr	r3, [pc, #140]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059ac:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059c4:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a19      	ldr	r2, [pc, #100]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fb fbce 	bl	8001170 <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fb fbca 	bl	8001170 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e067      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x730>
 80059f6:	e05f      	b.n	8005ab8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f8:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a0c      	ldr	r2, [pc, #48]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 80059fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fb fbb4 	bl	8001170 <HAL_GetTick>
 8005a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a0c:	f7fb fbb0 	bl	8001170 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e04d      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a1e:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <HAL_RCC_OscConfig+0x788>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0x764>
 8005a2a:	e045      	b.n	8005ab8 <HAL_RCC_OscConfig+0x810>
 8005a2c:	58024800 	.word	0x58024800
 8005a30:	58024400 	.word	0x58024400
 8005a34:	fffffc0c 	.word	0xfffffc0c
 8005a38:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a3c:	4b21      	ldr	r3, [pc, #132]	; (8005ac4 <HAL_RCC_OscConfig+0x81c>)
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <HAL_RCC_OscConfig+0x81c>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d031      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f003 0203 	and.w	r2, r3, #3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d12a      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d122      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d11a      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	0a5b      	lsrs	r3, r3, #9
 8005a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d111      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	0c1b      	lsrs	r3, r3, #16
 8005a94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d108      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	0e1b      	lsrs	r3, r3, #24
 8005aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d001      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3730      	adds	r7, #48	; 0x30
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	58024400 	.word	0x58024400

08005ac8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e19c      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005adc:	4b8a      	ldr	r3, [pc, #552]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d910      	bls.n	8005b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aea:	4b87      	ldr	r3, [pc, #540]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f023 020f 	bic.w	r2, r3, #15
 8005af2:	4985      	ldr	r1, [pc, #532]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afa:	4b83      	ldr	r3, [pc, #524]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e184      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d010      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	4b7b      	ldr	r3, [pc, #492]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d908      	bls.n	8005b3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b28:	4b78      	ldr	r3, [pc, #480]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	4975      	ldr	r1, [pc, #468]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d010      	beq.n	8005b68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695a      	ldr	r2, [r3, #20]
 8005b4a:	4b70      	ldr	r3, [pc, #448]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d908      	bls.n	8005b68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b56:	4b6d      	ldr	r3, [pc, #436]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	496a      	ldr	r1, [pc, #424]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d010      	beq.n	8005b96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699a      	ldr	r2, [r3, #24]
 8005b78:	4b64      	ldr	r3, [pc, #400]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d908      	bls.n	8005b96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b84:	4b61      	ldr	r3, [pc, #388]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	495e      	ldr	r1, [pc, #376]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d010      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69da      	ldr	r2, [r3, #28]
 8005ba6:	4b59      	ldr	r3, [pc, #356]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d908      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bb2:	4b56      	ldr	r3, [pc, #344]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	4953      	ldr	r1, [pc, #332]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d010      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	4b4d      	ldr	r3, [pc, #308]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d908      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be0:	4b4a      	ldr	r3, [pc, #296]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f023 020f 	bic.w	r2, r3, #15
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4947      	ldr	r1, [pc, #284]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d055      	beq.n	8005caa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bfe:	4b43      	ldr	r3, [pc, #268]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4940      	ldr	r1, [pc, #256]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d107      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c18:	4b3c      	ldr	r3, [pc, #240]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d121      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0f6      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c30:	4b36      	ldr	r3, [pc, #216]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d115      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0ea      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d107      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c48:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0de      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c58:	4b2c      	ldr	r3, [pc, #176]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0d6      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c68:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f023 0207 	bic.w	r2, r3, #7
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4925      	ldr	r1, [pc, #148]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7a:	f7fb fa79 	bl	8001170 <HAL_GetTick>
 8005c7e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c80:	e00a      	b.n	8005c98 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c82:	f7fb fa75 	bl	8001170 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e0be      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c98:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d1eb      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d010      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d208      	bcs.n	8005cd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f023 020f 	bic.w	r2, r3, #15
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	490e      	ldr	r1, [pc, #56]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d214      	bcs.n	8005d10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 020f 	bic.w	r2, r3, #15
 8005cee:	4906      	ldr	r1, [pc, #24]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e086      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
 8005d08:	52002000 	.word	0x52002000
 8005d0c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d010      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	4b3f      	ldr	r3, [pc, #252]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d208      	bcs.n	8005d3e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d2c:	4b3c      	ldr	r3, [pc, #240]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	4939      	ldr	r1, [pc, #228]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d010      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	4b34      	ldr	r3, [pc, #208]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d208      	bcs.n	8005d6c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d5a:	4b31      	ldr	r3, [pc, #196]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	492e      	ldr	r1, [pc, #184]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d010      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	4b28      	ldr	r3, [pc, #160]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d208      	bcs.n	8005d9a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d88:	4b25      	ldr	r3, [pc, #148]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	4922      	ldr	r1, [pc, #136]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d010      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d208      	bcs.n	8005dc8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005db6:	4b1a      	ldr	r3, [pc, #104]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	4917      	ldr	r1, [pc, #92]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dc8:	f000 f834 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8005dcc:	4601      	mov	r1, r0
 8005dce:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <HAL_RCC_ClockConfig+0x35c>)
 8005dda:	5cd3      	ldrb	r3, [r2, r3]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	fa21 f303 	lsr.w	r3, r1, r3
 8005de4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005de6:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <HAL_RCC_ClockConfig+0x35c>)
 8005df0:	5cd3      	ldrb	r3, [r2, r3]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfc:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <HAL_RCC_ClockConfig+0x360>)
 8005dfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_RCC_ClockConfig+0x364>)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e06:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x368>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fb f966 	bl	80010dc <HAL_InitTick>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	58024400 	.word	0x58024400
 8005e24:	0800859c 	.word	0x0800859c
 8005e28:	20000004 	.word	0x20000004
 8005e2c:	20000000 	.word	0x20000000
 8005e30:	2000000c 	.word	0x2000000c

08005e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e3a:	4baf      	ldr	r3, [pc, #700]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e42:	2b18      	cmp	r3, #24
 8005e44:	f200 814e 	bhi.w	80060e4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005eb5 	.word	0x08005eb5
 8005e54:	080060e5 	.word	0x080060e5
 8005e58:	080060e5 	.word	0x080060e5
 8005e5c:	080060e5 	.word	0x080060e5
 8005e60:	080060e5 	.word	0x080060e5
 8005e64:	080060e5 	.word	0x080060e5
 8005e68:	080060e5 	.word	0x080060e5
 8005e6c:	080060e5 	.word	0x080060e5
 8005e70:	08005edb 	.word	0x08005edb
 8005e74:	080060e5 	.word	0x080060e5
 8005e78:	080060e5 	.word	0x080060e5
 8005e7c:	080060e5 	.word	0x080060e5
 8005e80:	080060e5 	.word	0x080060e5
 8005e84:	080060e5 	.word	0x080060e5
 8005e88:	080060e5 	.word	0x080060e5
 8005e8c:	080060e5 	.word	0x080060e5
 8005e90:	08005ee1 	.word	0x08005ee1
 8005e94:	080060e5 	.word	0x080060e5
 8005e98:	080060e5 	.word	0x080060e5
 8005e9c:	080060e5 	.word	0x080060e5
 8005ea0:	080060e5 	.word	0x080060e5
 8005ea4:	080060e5 	.word	0x080060e5
 8005ea8:	080060e5 	.word	0x080060e5
 8005eac:	080060e5 	.word	0x080060e5
 8005eb0:	08005ee7 	.word	0x08005ee7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb4:	4b90      	ldr	r3, [pc, #576]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ec0:	4b8d      	ldr	r3, [pc, #564]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	08db      	lsrs	r3, r3, #3
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	4a8c      	ldr	r2, [pc, #560]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ed2:	e10a      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ed4:	4b89      	ldr	r3, [pc, #548]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005ed6:	61bb      	str	r3, [r7, #24]
    break;
 8005ed8:	e107      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005eda:	4b89      	ldr	r3, [pc, #548]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005edc:	61bb      	str	r3, [r7, #24]
    break;
 8005ede:	e104      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ee0:	4b88      	ldr	r3, [pc, #544]	; (8006104 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005ee2:	61bb      	str	r3, [r7, #24]
    break;
 8005ee4:	e101      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ee6:	4b84      	ldr	r3, [pc, #528]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ef0:	4b81      	ldr	r3, [pc, #516]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005efc:	4b7e      	ldr	r3, [pc, #504]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f06:	4b7c      	ldr	r3, [pc, #496]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0a:	08db      	lsrs	r3, r3, #3
 8005f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80da 	beq.w	80060de <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d05a      	beq.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d302      	bcc.n	8005f3a <HAL_RCC_GetSysClockFreq+0x106>
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d078      	beq.n	800602a <HAL_RCC_GetSysClockFreq+0x1f6>
 8005f38:	e099      	b.n	800606e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f3a:	4b6f      	ldr	r3, [pc, #444]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d02d      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f46:	4b6c      	ldr	r3, [pc, #432]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	08db      	lsrs	r3, r3, #3
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	4a6a      	ldr	r2, [pc, #424]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f52:	fa22 f303 	lsr.w	r3, r2, r3
 8005f56:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f70:	4b61      	ldr	r3, [pc, #388]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f80:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f84:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fa0:	e087      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fac:	eddf 6a57 	vldr	s13, [pc, #348]	; 800610c <HAL_RCC_GetSysClockFreq+0x2d8>
 8005fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb4:	4b50      	ldr	r3, [pc, #320]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe4:	e065      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	ee07 3a90 	vmov	s15, r3
 8005fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006110 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff8:	4b3f      	ldr	r3, [pc, #252]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006000:	ee07 3a90 	vmov	s15, r3
 8006004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006008:	ed97 6a02 	vldr	s12, [r7, #8]
 800600c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006018:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006024:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006028:	e043      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006034:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006114 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603c:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006050:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800606c:	e021      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006078:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006110 <HAL_RCC_GetSysClockFreq+0x2dc>
 800607c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006080:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006090:	ed97 6a02 	vldr	s12, [r7, #8]
 8006094:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006108 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060b0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060b2:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	0a5b      	lsrs	r3, r3, #9
 80060b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060bc:	3301      	adds	r3, #1
 80060be:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d6:	ee17 3a90 	vmov	r3, s15
 80060da:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060dc:	e005      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
    break;
 80060e2:	e002      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80060e6:	61bb      	str	r3, [r7, #24]
    break;
 80060e8:	bf00      	nop
  }

  return sysclockfreq;
 80060ea:	69bb      	ldr	r3, [r7, #24]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3724      	adds	r7, #36	; 0x24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	58024400 	.word	0x58024400
 80060fc:	03d09000 	.word	0x03d09000
 8006100:	003d0900 	.word	0x003d0900
 8006104:	007a1200 	.word	0x007a1200
 8006108:	46000000 	.word	0x46000000
 800610c:	4c742400 	.word	0x4c742400
 8006110:	4a742400 	.word	0x4a742400
 8006114:	4af42400 	.word	0x4af42400

08006118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800611e:	f7ff fe89 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8006122:	4601      	mov	r1, r0
 8006124:	4b10      	ldr	r3, [pc, #64]	; (8006168 <HAL_RCC_GetHCLKFreq+0x50>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	4a0f      	ldr	r2, [pc, #60]	; (800616c <HAL_RCC_GetHCLKFreq+0x54>)
 8006130:	5cd3      	ldrb	r3, [r2, r3]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	fa21 f303 	lsr.w	r3, r1, r3
 800613a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <HAL_RCC_GetHCLKFreq+0x50>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	4a09      	ldr	r2, [pc, #36]	; (800616c <HAL_RCC_GetHCLKFreq+0x54>)
 8006146:	5cd3      	ldrb	r3, [r2, r3]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	4a07      	ldr	r2, [pc, #28]	; (8006170 <HAL_RCC_GetHCLKFreq+0x58>)
 8006154:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006156:	4a07      	ldr	r2, [pc, #28]	; (8006174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <HAL_RCC_GetHCLKFreq+0x58>)
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	58024400 	.word	0x58024400
 800616c:	0800859c 	.word	0x0800859c
 8006170:	20000004 	.word	0x20000004
 8006174:	20000000 	.word	0x20000000

08006178 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006180:	2300      	movs	r3, #0
 8006182:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006184:	2300      	movs	r3, #0
 8006186:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d03d      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800619c:	d013      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800619e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a2:	d802      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80061a8:	e01f      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80061aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ae:	d013      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80061b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061b4:	d01c      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80061b6:	e018      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b8:	4baf      	ldr	r3, [pc, #700]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4aae      	ldr	r2, [pc, #696]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061c4:	e015      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3304      	adds	r3, #4
 80061ca:	2102      	movs	r1, #2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fd33 	bl	8007c38 <RCCEx_PLL2_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061d6:	e00c      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3324      	adds	r3, #36	; 0x24
 80061dc:	2102      	movs	r1, #2
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fddc 	bl	8007d9c <RCCEx_PLL3_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
      break;
 80061ee:	e000      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80061f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d109      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061f8:	4b9f      	ldr	r3, [pc, #636]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006204:	499c      	ldr	r1, [pc, #624]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006206:	4313      	orrs	r3, r2
 8006208:	650b      	str	r3, [r1, #80]	; 0x50
 800620a:	e001      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d03d      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006220:	2b04      	cmp	r3, #4
 8006222:	d826      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006241 	.word	0x08006241
 8006230:	0800624f 	.word	0x0800624f
 8006234:	08006261 	.word	0x08006261
 8006238:	08006279 	.word	0x08006279
 800623c:	08006279 	.word	0x08006279
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006240:	4b8d      	ldr	r3, [pc, #564]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	4a8c      	ldr	r2, [pc, #560]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800624c:	e015      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3304      	adds	r3, #4
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f001 fcef 	bl	8007c38 <RCCEx_PLL2_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800625e:	e00c      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3324      	adds	r3, #36	; 0x24
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f001 fd98 	bl	8007d9c <RCCEx_PLL3_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006270:	e003      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
      break;
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006280:	4b7d      	ldr	r3, [pc, #500]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006284:	f023 0207 	bic.w	r2, r3, #7
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	497a      	ldr	r1, [pc, #488]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800628e:	4313      	orrs	r3, r2
 8006290:	650b      	str	r3, [r1, #80]	; 0x50
 8006292:	e001      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d03e      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	2b80      	cmp	r3, #128	; 0x80
 80062aa:	d01c      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d804      	bhi.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x142>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d00d      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80062b8:	e01e      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80062ba:	2bc0      	cmp	r3, #192	; 0xc0
 80062bc:	d01f      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d01e      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80062c4:	e018      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c6:	4b6c      	ldr	r3, [pc, #432]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	4a6b      	ldr	r2, [pc, #428]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062d2:	e017      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 fcac 	bl	8007c38 <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062e4:	e00e      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3324      	adds	r3, #36	; 0x24
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fd55 	bl	8007d9c <RCCEx_PLL3_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062f6:	e005      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
      break;
 80062fc:	e002      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80062fe:	bf00      	nop
 8006300:	e000      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800630a:	4b5b      	ldr	r3, [pc, #364]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800630c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	4958      	ldr	r1, [pc, #352]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006318:	4313      	orrs	r3, r2
 800631a:	650b      	str	r3, [r1, #80]	; 0x50
 800631c:	e001      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632a:	2b00      	cmp	r3, #0
 800632c:	d044      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006338:	d01f      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800633a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633e:	d805      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006348:	d00e      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800634a:	e01f      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800634c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006350:	d01f      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006356:	d01e      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006358:	e018      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635a:	4b47      	ldr	r3, [pc, #284]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	4a46      	ldr	r2, [pc, #280]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006366:	e017      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fc62 	bl	8007c38 <RCCEx_PLL2_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006378:	e00e      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3324      	adds	r3, #36	; 0x24
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f001 fd0b 	bl	8007d9c <RCCEx_PLL3_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800638a:	e005      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
      break;
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800639e:	4b36      	ldr	r3, [pc, #216]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ac:	4932      	ldr	r1, [pc, #200]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	658b      	str	r3, [r1, #88]	; 0x58
 80063b2:	e001      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d044      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ce:	d01f      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80063d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063d4:	d805      	bhi.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80063da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063de:	d00e      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063e0:	e01f      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80063e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063e6:	d01f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80063e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ec:	d01e      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80063ee:	e018      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f0:	4b21      	ldr	r3, [pc, #132]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4a20      	ldr	r2, [pc, #128]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063fc:	e017      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	2100      	movs	r1, #0
 8006404:	4618      	mov	r0, r3
 8006406:	f001 fc17 	bl	8007c38 <RCCEx_PLL2_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800640e:	e00e      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3324      	adds	r3, #36	; 0x24
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fcc0 	bl	8007d9c <RCCEx_PLL3_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006420:	e005      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
      break;
 8006426:	e002      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006428:	bf00      	nop
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800642c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006434:	4b10      	ldr	r3, [pc, #64]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006442:	490d      	ldr	r1, [pc, #52]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006444:	4313      	orrs	r3, r2
 8006446:	658b      	str	r3, [r1, #88]	; 0x58
 8006448:	e001      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d035      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645e:	2b10      	cmp	r3, #16
 8006460:	d00c      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006462:	2b10      	cmp	r3, #16
 8006464:	d802      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01b      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800646a:	e017      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d00c      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006470:	2b30      	cmp	r3, #48	; 0x30
 8006472:	d018      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006474:	e012      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006476:	bf00      	nop
 8006478:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647c:	4baf      	ldr	r3, [pc, #700]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	4aae      	ldr	r2, [pc, #696]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006488:	e00e      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f001 fbd1 	bl	8007c38 <RCCEx_PLL2_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800649a:	e005      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	75fb      	strb	r3, [r7, #23]
      break;
 80064a0:	e002      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80064a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064ae:	4ba3      	ldr	r3, [pc, #652]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ba:	49a0      	ldr	r1, [pc, #640]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064c0:	e001      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d042      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064da:	d01f      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80064dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e0:	d805      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80064e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ea:	d00e      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80064ec:	e01f      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80064ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064f2:	d01f      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80064f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f8:	d01e      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80064fa:	e018      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fc:	4b8f      	ldr	r3, [pc, #572]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	4a8e      	ldr	r2, [pc, #568]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006508:	e017      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3304      	adds	r3, #4
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f001 fb91 	bl	8007c38 <RCCEx_PLL2_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800651a:	e00e      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fc3a 	bl	8007d9c <RCCEx_PLL3_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800652c:	e005      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
      break;
 8006532:	e002      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d109      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006540:	4b7e      	ldr	r3, [pc, #504]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654c:	497b      	ldr	r1, [pc, #492]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800654e:	4313      	orrs	r3, r2
 8006550:	650b      	str	r3, [r1, #80]	; 0x50
 8006552:	e001      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d042      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800656c:	d01b      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800656e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006572:	d805      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d022      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	d00a      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800657e:	e01b      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006584:	d01d      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658a:	d01c      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800658c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006590:	d01b      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006592:	e011      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	2101      	movs	r1, #1
 800659a:	4618      	mov	r0, r3
 800659c:	f001 fb4c 	bl	8007c38 <RCCEx_PLL2_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065a4:	e012      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3324      	adds	r3, #36	; 0x24
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 fbf5 	bl	8007d9c <RCCEx_PLL3_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065b6:	e009      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	75fb      	strb	r3, [r7, #23]
      break;
 80065bc:	e006      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80065be:	bf00      	nop
 80065c0:	e004      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80065ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065d2:	4b5a      	ldr	r3, [pc, #360]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065de:	4957      	ldr	r1, [pc, #348]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	650b      	str	r3, [r1, #80]	; 0x50
 80065e4:	e001      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d044      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006600:	d01b      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d805      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d022      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800660c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006610:	d00a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006612:	e01b      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006618:	d01d      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800661a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800661e:	d01c      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006624:	d01b      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006626:	e011      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	2101      	movs	r1, #1
 800662e:	4618      	mov	r0, r3
 8006630:	f001 fb02 	bl	8007c38 <RCCEx_PLL2_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006638:	e012      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3324      	adds	r3, #36	; 0x24
 800663e:	2101      	movs	r1, #1
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fbab 	bl	8007d9c <RCCEx_PLL3_Config>
 8006646:	4603      	mov	r3, r0
 8006648:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800664a:	e009      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	75fb      	strb	r3, [r7, #23]
      break;
 8006650:	e006      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006652:	bf00      	nop
 8006654:	e004      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800665e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006666:	4b35      	ldr	r3, [pc, #212]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006674:	4931      	ldr	r1, [pc, #196]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006676:	4313      	orrs	r3, r2
 8006678:	658b      	str	r3, [r1, #88]	; 0x58
 800667a:	e001      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d02d      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006694:	d005      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d013      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80066a0:	e00f      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a2:	4b26      	ldr	r3, [pc, #152]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	4a25      	ldr	r2, [pc, #148]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066ae:	e00c      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	2101      	movs	r1, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 fabe 	bl	8007c38 <RCCEx_PLL2_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066c0:	e003      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]
      break;
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80066c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066dc:	4917      	ldr	r1, [pc, #92]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	650b      	str	r3, [r1, #80]	; 0x50
 80066e2:	e001      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d035      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d81b      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80066fc:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006741 	.word	0x08006741
 8006708:	08006715 	.word	0x08006715
 800670c:	08006723 	.word	0x08006723
 8006710:	08006741 	.word	0x08006741
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b09      	ldr	r3, [pc, #36]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a08      	ldr	r2, [pc, #32]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006720:	e00f      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	2102      	movs	r1, #2
 8006728:	4618      	mov	r0, r3
 800672a:	f001 fa85 	bl	8007c38 <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
      break;
 8006738:	e003      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800673a:	bf00      	nop
 800673c:	58024400 	.word	0x58024400
      break;
 8006740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006748:	4bba      	ldr	r3, [pc, #744]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800674a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674c:	f023 0203 	bic.w	r2, r3, #3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006754:	49b7      	ldr	r1, [pc, #732]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006756:	4313      	orrs	r3, r2
 8006758:	64cb      	str	r3, [r1, #76]	; 0x4c
 800675a:	e001      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8086 	beq.w	800687a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800676e:	4bb2      	ldr	r3, [pc, #712]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4ab1      	ldr	r2, [pc, #708]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006778:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800677a:	f7fa fcf9 	bl	8001170 <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006780:	e009      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006782:	f7fa fcf5 	bl	8001170 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b64      	cmp	r3, #100	; 0x64
 800678e:	d902      	bls.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	75fb      	strb	r3, [r7, #23]
        break;
 8006794:	e005      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006796:	4ba8      	ldr	r3, [pc, #672]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0ef      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d166      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067a8:	4ba2      	ldr	r3, [pc, #648]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067b2:	4053      	eors	r3, r2
 80067b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d013      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067bc:	4b9d      	ldr	r3, [pc, #628]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067c6:	4b9b      	ldr	r3, [pc, #620]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	4a9a      	ldr	r2, [pc, #616]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067d2:	4b98      	ldr	r3, [pc, #608]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	4a97      	ldr	r2, [pc, #604]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067de:	4a95      	ldr	r2, [pc, #596]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ee:	d115      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f0:	f7fa fcbe 	bl	8001170 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067f6:	e00b      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f8:	f7fa fcba 	bl	8001170 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	f241 3288 	movw	r2, #5000	; 0x1388
 8006806:	4293      	cmp	r3, r2
 8006808:	d902      	bls.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	75fb      	strb	r3, [r7, #23]
            break;
 800680e:	e005      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006810:	4b88      	ldr	r3, [pc, #544]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0ed      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800681c:	7dfb      	ldrb	r3, [r7, #23]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d126      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006830:	d10d      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006832:	4b80      	ldr	r3, [pc, #512]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006840:	0919      	lsrs	r1, r3, #4
 8006842:	4b7e      	ldr	r3, [pc, #504]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006844:	400b      	ands	r3, r1
 8006846:	497b      	ldr	r1, [pc, #492]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006848:	4313      	orrs	r3, r2
 800684a:	610b      	str	r3, [r1, #16]
 800684c:	e005      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800684e:	4b79      	ldr	r3, [pc, #484]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4a78      	ldr	r2, [pc, #480]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006854:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006858:	6113      	str	r3, [r2, #16]
 800685a:	4b76      	ldr	r3, [pc, #472]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800685c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006868:	4972      	ldr	r1, [pc, #456]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	670b      	str	r3, [r1, #112]	; 0x70
 800686e:	e004      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	75bb      	strb	r3, [r7, #22]
 8006874:	e001      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d07d      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800688a:	2b28      	cmp	r3, #40	; 0x28
 800688c:	d866      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800688e:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	08006963 	.word	0x08006963
 8006898:	0800695d 	.word	0x0800695d
 800689c:	0800695d 	.word	0x0800695d
 80068a0:	0800695d 	.word	0x0800695d
 80068a4:	0800695d 	.word	0x0800695d
 80068a8:	0800695d 	.word	0x0800695d
 80068ac:	0800695d 	.word	0x0800695d
 80068b0:	0800695d 	.word	0x0800695d
 80068b4:	08006939 	.word	0x08006939
 80068b8:	0800695d 	.word	0x0800695d
 80068bc:	0800695d 	.word	0x0800695d
 80068c0:	0800695d 	.word	0x0800695d
 80068c4:	0800695d 	.word	0x0800695d
 80068c8:	0800695d 	.word	0x0800695d
 80068cc:	0800695d 	.word	0x0800695d
 80068d0:	0800695d 	.word	0x0800695d
 80068d4:	0800694b 	.word	0x0800694b
 80068d8:	0800695d 	.word	0x0800695d
 80068dc:	0800695d 	.word	0x0800695d
 80068e0:	0800695d 	.word	0x0800695d
 80068e4:	0800695d 	.word	0x0800695d
 80068e8:	0800695d 	.word	0x0800695d
 80068ec:	0800695d 	.word	0x0800695d
 80068f0:	0800695d 	.word	0x0800695d
 80068f4:	08006963 	.word	0x08006963
 80068f8:	0800695d 	.word	0x0800695d
 80068fc:	0800695d 	.word	0x0800695d
 8006900:	0800695d 	.word	0x0800695d
 8006904:	0800695d 	.word	0x0800695d
 8006908:	0800695d 	.word	0x0800695d
 800690c:	0800695d 	.word	0x0800695d
 8006910:	0800695d 	.word	0x0800695d
 8006914:	08006963 	.word	0x08006963
 8006918:	0800695d 	.word	0x0800695d
 800691c:	0800695d 	.word	0x0800695d
 8006920:	0800695d 	.word	0x0800695d
 8006924:	0800695d 	.word	0x0800695d
 8006928:	0800695d 	.word	0x0800695d
 800692c:	0800695d 	.word	0x0800695d
 8006930:	0800695d 	.word	0x0800695d
 8006934:	08006963 	.word	0x08006963
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	2101      	movs	r1, #1
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f97a 	bl	8007c38 <RCCEx_PLL2_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006948:	e00c      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3324      	adds	r3, #36	; 0x24
 800694e:	2101      	movs	r1, #1
 8006950:	4618      	mov	r0, r3
 8006952:	f001 fa23 	bl	8007d9c <RCCEx_PLL3_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800695a:	e003      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	75fb      	strb	r3, [r7, #23]
      break;
 8006960:	e000      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800696a:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006976:	492f      	ldr	r1, [pc, #188]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006978:	4313      	orrs	r3, r2
 800697a:	654b      	str	r3, [r1, #84]	; 0x54
 800697c:	e001      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d037      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006992:	2b05      	cmp	r3, #5
 8006994:	d820      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069df 	.word	0x080069df
 80069a0:	080069b5 	.word	0x080069b5
 80069a4:	080069c7 	.word	0x080069c7
 80069a8:	080069df 	.word	0x080069df
 80069ac:	080069df 	.word	0x080069df
 80069b0:	080069df 	.word	0x080069df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3304      	adds	r3, #4
 80069b8:	2101      	movs	r1, #1
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 f93c 	bl	8007c38 <RCCEx_PLL2_Config>
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069c4:	e00c      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3324      	adds	r3, #36	; 0x24
 80069ca:	2101      	movs	r1, #1
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 f9e5 	bl	8007d9c <RCCEx_PLL3_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
      break;
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80069de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069e6:	4b13      	ldr	r3, [pc, #76]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	f023 0207 	bic.w	r2, r3, #7
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f2:	4910      	ldr	r1, [pc, #64]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	654b      	str	r3, [r1, #84]	; 0x54
 80069f8:	e001      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d040      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d827      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a6b 	.word	0x08006a6b
 8006a20:	08006a41 	.word	0x08006a41
 8006a24:	08006a53 	.word	0x08006a53
 8006a28:	08006a6b 	.word	0x08006a6b
 8006a2c:	08006a6b 	.word	0x08006a6b
 8006a30:	08006a6b 	.word	0x08006a6b
 8006a34:	58024400 	.word	0x58024400
 8006a38:	58024800 	.word	0x58024800
 8006a3c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3304      	adds	r3, #4
 8006a44:	2101      	movs	r1, #1
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 f8f6 	bl	8007c38 <RCCEx_PLL2_Config>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a50:	e00c      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3324      	adds	r3, #36	; 0x24
 8006a56:	2101      	movs	r1, #1
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 f99f 	bl	8007d9c <RCCEx_PLL3_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a62:	e003      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
      break;
 8006a68:	e000      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a72:	4bb2      	ldr	r3, [pc, #712]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a76:	f023 0207 	bic.w	r2, r3, #7
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a80:	49ae      	ldr	r1, [pc, #696]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	658b      	str	r3, [r1, #88]	; 0x58
 8006a86:	e001      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d044      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa2:	d01b      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa8:	d805      	bhi.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d022      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab2:	d00a      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006ab4:	e01b      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aba:	d01d      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ac0:	d01c      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ac6:	d01b      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006ac8:	e011      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3304      	adds	r3, #4
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 f8b1 	bl	8007c38 <RCCEx_PLL2_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ada:	e012      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3324      	adds	r3, #36	; 0x24
 8006ae0:	2102      	movs	r1, #2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f001 f95a 	bl	8007d9c <RCCEx_PLL3_Config>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006aec:	e009      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
      break;
 8006af2:	e006      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006af4:	bf00      	nop
 8006af6:	e004      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006af8:	bf00      	nop
 8006afa:	e002      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006afc:	bf00      	nop
 8006afe:	e000      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b08:	4b8c      	ldr	r3, [pc, #560]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b16:	4989      	ldr	r1, [pc, #548]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8006b1c:	e001      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d044      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b38:	d01b      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3e:	d805      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d022      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b48:	d00a      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006b4a:	e01b      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b50:	d01d      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b56:	d01c      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b5c:	d01b      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006b5e:	e011      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 f866 	bl	8007c38 <RCCEx_PLL2_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b70:	e012      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3324      	adds	r3, #36	; 0x24
 8006b76:	2102      	movs	r1, #2
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 f90f 	bl	8007d9c <RCCEx_PLL3_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b82:	e009      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	75fb      	strb	r3, [r7, #23]
      break;
 8006b88:	e006      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b8a:	bf00      	nop
 8006b8c:	e004      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b8e:	bf00      	nop
 8006b90:	e002      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b92:	bf00      	nop
 8006b94:	e000      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b9e:	4b67      	ldr	r3, [pc, #412]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bac:	4963      	ldr	r1, [pc, #396]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	658b      	str	r3, [r1, #88]	; 0x58
 8006bb2:	e001      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d044      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bce:	d01b      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd4:	d805      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d022      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bde:	d00a      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006be0:	e01b      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be6:	d01d      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006be8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bec:	d01c      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006bee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bf2:	d01b      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006bf4:	e011      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 f81b 	bl	8007c38 <RCCEx_PLL2_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c06:	e012      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 f8c4 	bl	8007d9c <RCCEx_PLL3_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c18:	e009      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1e:	e006      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006c20:	bf00      	nop
 8006c22:	e004      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c34:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c42:	493e      	ldr	r1, [pc, #248]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	658b      	str	r3, [r1, #88]	; 0x58
 8006c48:	e001      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d10a      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3324      	adds	r3, #36	; 0x24
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 f895 	bl	8007d9c <RCCEx_PLL3_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c7c:	4b2f      	ldr	r3, [pc, #188]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c8a:	492c      	ldr	r1, [pc, #176]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01a      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca6:	d10a      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	2102      	movs	r1, #2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f874 	bl	8007d9c <RCCEx_PLL3_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cbe:	4b1f      	ldr	r3, [pc, #124]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ccc:	491b      	ldr	r1, [pc, #108]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d032      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce8:	d00d      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006cea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cee:	d016      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d111      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 ff9c 	bl	8007c38 <RCCEx_PLL2_Config>
 8006d00:	4603      	mov	r3, r0
 8006d02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d04:	e00c      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3324      	adds	r3, #36	; 0x24
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 f845 	bl	8007d9c <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d16:	e003      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10c      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d34:	4901      	ldr	r1, [pc, #4]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	658b      	str	r3, [r1, #88]	; 0x58
 8006d3a:	e003      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d02f      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d5a:	d00c      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d60:	d015      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d66:	d10f      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d68:	4b79      	ldr	r3, [pc, #484]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	4a78      	ldr	r2, [pc, #480]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d74:	e00c      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3324      	adds	r3, #36	; 0x24
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 f80d 	bl	8007d9c <RCCEx_PLL3_Config>
 8006d82:	4603      	mov	r3, r0
 8006d84:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d86:	e003      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8c:	e000      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d96:	4b6e      	ldr	r3, [pc, #440]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da4:	496a      	ldr	r1, [pc, #424]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	654b      	str	r3, [r1, #84]	; 0x54
 8006daa:	e001      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d029      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc8:	d007      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006dca:	e00f      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dcc:	4b60      	ldr	r3, [pc, #384]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	4a5f      	ldr	r2, [pc, #380]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006dd8:	e00b      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3304      	adds	r3, #4
 8006dde:	2102      	movs	r1, #2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 ff29 	bl	8007c38 <RCCEx_PLL2_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006dea:	e002      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
      break;
 8006df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d109      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006df8:	4b55      	ldr	r3, [pc, #340]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e04:	4952      	ldr	r1, [pc, #328]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e0a:	e001      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3324      	adds	r3, #36	; 0x24
 8006e20:	2102      	movs	r1, #2
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 ffba 	bl	8007d9c <RCCEx_PLL3_Config>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d02f      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e46:	d00c      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4c:	d802      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d011      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006e52:	e00d      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e58:	d00f      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5e:	d00e      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006e60:	e006      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e62:	4b3b      	ldr	r3, [pc, #236]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	4a3a      	ldr	r2, [pc, #232]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e6e:	e007      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]
      break;
 8006e74:	e004      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006e76:	bf00      	nop
 8006e78:	e002      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006e7a:	bf00      	nop
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e86:	4b32      	ldr	r3, [pc, #200]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e92:	492f      	ldr	r1, [pc, #188]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	654b      	str	r3, [r1, #84]	; 0x54
 8006e98:	e001      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d008      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006eaa:	4b29      	ldr	r3, [pc, #164]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	4926      	ldr	r1, [pc, #152]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ec8:	4b21      	ldr	r3, [pc, #132]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ed6:	491e      	ldr	r1, [pc, #120]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ee8:	4b19      	ldr	r3, [pc, #100]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef4:	4916      	ldr	r1, [pc, #88]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00d      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f06:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	4a11      	ldr	r2, [pc, #68]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f10:	6113      	str	r3, [r2, #16]
 8006f12:	4b0f      	ldr	r3, [pc, #60]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f1c:	490c      	ldr	r1, [pc, #48]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da08      	bge.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f2a:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f36:	4906      	ldr	r1, [pc, #24]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006f3c:	7dbb      	ldrb	r3, [r7, #22]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e000      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	58024400 	.word	0x58024400

08006f54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b090      	sub	sp, #64	; 0x40
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f62:	d150      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006f64:	4ba1      	ldr	r3, [pc, #644]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d844      	bhi.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006f74:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006f91 	.word	0x08006f91
 8006f80:	08006fa1 	.word	0x08006fa1
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006ff9 	.word	0x08006ff9
 8006f8c:	08006fc1 	.word	0x08006fc1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fd03 	bl	80079a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f9e:	e241      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa0:	f107 0318 	add.w	r3, r7, #24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fa63 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fae:	e239      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fba7 	bl	8007708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fbe:	e231      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fc0:	4b8a      	ldr	r3, [pc, #552]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006fd0:	4b87      	ldr	r3, [pc, #540]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006fd4:	e226      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fdc:	d102      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006fde:	4b85      	ldr	r3, [pc, #532]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe2:	e21f      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fea:	d102      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006fec:	4b82      	ldr	r3, [pc, #520]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ff0:	e218      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ff6:	e215      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ff8:	4b80      	ldr	r3, [pc, #512]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffc:	e212      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007002:	bf00      	nop
 8007004:	e20e      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700c:	d14f      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800700e:	4b77      	ldr	r3, [pc, #476]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007012:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007016:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	2b80      	cmp	r3, #128	; 0x80
 800701c:	d01c      	beq.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d804      	bhi.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d008      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d00e      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800702a:	e03c      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800702c:	2bc0      	cmp	r3, #192	; 0xc0
 800702e:	d037      	beq.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007034:	d018      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007036:	e036      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fcaf 	bl	80079a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007046:	e1ed      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007048:	f107 0318 	add.w	r3, r7, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fa0f 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007056:	e1e5      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007058:	f107 030c 	add.w	r3, r7, #12
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fb53 	bl	8007708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007066:	e1dd      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007068:	4b60      	ldr	r3, [pc, #384]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800706a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007070:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007078:	4b5d      	ldr	r3, [pc, #372]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800707c:	e1d2      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007084:	d102      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007086:	4b5b      	ldr	r3, [pc, #364]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708a:	e1cb      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007092:	d102      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007094:	4b58      	ldr	r3, [pc, #352]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007098:	e1c4      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800709e:	e1c1      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070a0:	4b56      	ldr	r3, [pc, #344]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070a4:	e1be      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070aa:	bf00      	nop
 80070ac:	e1ba      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b4:	d153      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80070b6:	4b4d      	ldr	r3, [pc, #308]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80070be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c6:	d01f      	beq.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80070c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070cc:	d805      	bhi.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80070d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070d6:	d00f      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80070d8:	e03d      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80070da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070de:	d037      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80070e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070e4:	d018      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80070e6:	e036      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fc57 	bl	80079a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070f6:	e195      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070f8:	f107 0318 	add.w	r3, r7, #24
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 f9b7 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007106:	e18d      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007108:	f107 030c 	add.w	r3, r7, #12
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fafb 	bl	8007708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007116:	e185      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007118:	4b34      	ldr	r3, [pc, #208]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800711a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007120:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007128:	4b31      	ldr	r3, [pc, #196]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800712c:	e17a      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007134:	d102      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007136:	4b2f      	ldr	r3, [pc, #188]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713a:	e173      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800713c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007142:	d102      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007144:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007148:	e16c      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714e:	e169      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007150:	4b2a      	ldr	r3, [pc, #168]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007154:	e166      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715a:	bf00      	nop
 800715c:	e162      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007164:	d15d      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007166:	4b21      	ldr	r3, [pc, #132]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800716e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007176:	d01f      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800717c:	d805      	bhi.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007186:	d00f      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007188:	e047      	b.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800718a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800718e:	d041      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007190:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007194:	d018      	beq.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007196:	e040      	b.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fbff 	bl	80079a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a6:	e13d      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a8:	f107 0318 	add.w	r3, r7, #24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 f95f 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b6:	e135      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 faa3 	bl	8007708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c6:	e12d      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071c8:	4b08      	ldr	r3, [pc, #32]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071dc:	e122      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071e4:	d10c      	bne.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80071e6:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ea:	e11b      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80071ec:	58024400 	.word	0x58024400
 80071f0:	03d09000 	.word	0x03d09000
 80071f4:	003d0900 	.word	0x003d0900
 80071f8:	007a1200 	.word	0x007a1200
 80071fc:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007206:	d102      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007208:	4b89      	ldr	r3, [pc, #548]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800720c:	e10a      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007212:	e107      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007214:	4b87      	ldr	r3, [pc, #540]	; (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007218:	e104      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800721e:	bf00      	nop
 8007220:	e100      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007228:	d153      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800722a:	4b83      	ldr	r3, [pc, #524]	; (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800722c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007232:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723a:	d01f      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800723c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007240:	d805      	bhi.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724a:	d00f      	beq.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800724c:	e03d      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800724e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007252:	d037      	beq.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007258:	d018      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800725a:	e036      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800725c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fb9d 	bl	80079a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800726a:	e0db      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800726c:	f107 0318 	add.w	r3, r7, #24
 8007270:	4618      	mov	r0, r3
 8007272:	f000 f8fd 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800727a:	e0d3      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800727c:	f107 030c 	add.w	r3, r7, #12
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fa41 	bl	8007708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728a:	e0cb      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800728c:	4b6a      	ldr	r3, [pc, #424]	; (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800728e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007294:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800729c:	4b67      	ldr	r3, [pc, #412]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80072a0:	e0c0      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80072a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072a8:	d102      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80072aa:	4b65      	ldr	r3, [pc, #404]	; (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ae:	e0b9      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b6:	d102      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80072b8:	4b5d      	ldr	r3, [pc, #372]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072bc:	e0b2      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c2:	e0af      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072c4:	4b5b      	ldr	r3, [pc, #364]	; (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c8:	e0ac      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ce:	bf00      	nop
 80072d0:	e0a8      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072d8:	d13d      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80072da:	4b57      	ldr	r3, [pc, #348]	; (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80072dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ea:	d00c      	beq.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80072ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f0:	d011      	beq.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d12b      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f6:	f107 0318 	add.w	r3, r7, #24
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f8b8 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007304:	e08e      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007306:	f107 030c 	add.w	r3, r7, #12
 800730a:	4618      	mov	r0, r3
 800730c:	f000 f9fc 	bl	8007708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007314:	e086      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007316:	4b48      	ldr	r3, [pc, #288]	; (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800731e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007326:	4b45      	ldr	r3, [pc, #276]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007328:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800732a:	e07b      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800732c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007332:	d102      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007334:	4b42      	ldr	r3, [pc, #264]	; (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007338:	e074      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800733a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007340:	d102      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007342:	4b3b      	ldr	r3, [pc, #236]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007346:	e06d      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800734c:	e06a      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007352:	bf00      	nop
 8007354:	e066      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800735c:	d11f      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800735e:	4b36      	ldr	r3, [pc, #216]	; (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007366:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800736e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007372:	d008      	beq.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007374:	e00f      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fb10 	bl	80079a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007384:	e04e      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007386:	f107 0318 	add.w	r3, r7, #24
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f870 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007394:	e046      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800739a:	bf00      	nop
 800739c:	e042      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a4:	d13c      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80073a6:	4b24      	ldr	r3, [pc, #144]	; (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80073ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b6:	d01e      	beq.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80073b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073bc:	d805      	bhi.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00d      	beq.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80073c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c6:	d00e      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80073c8:	e026      	b.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80073ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ce:	d01d      	beq.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80073d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073d4:	d01d      	beq.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80073d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073da:	d014      	beq.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80073dc:	e01c      	b.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80073de:	f000 f831 	bl	8007444 <HAL_RCCEx_GetD3PCLK1Freq>
 80073e2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80073e4:	e01e      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e6:	f107 0318 	add.w	r3, r7, #24
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f840 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f4:	e016      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f6:	f107 030c 	add.w	r3, r7, #12
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 f984 	bl	8007708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007404:	e00e      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800740a:	e00b      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800740c:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007410:	e008      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007412:	4b07      	ldr	r3, [pc, #28]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007416:	e005      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741c:	bf00      	nop
 800741e:	e001      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007426:	4618      	mov	r0, r3
 8007428:	3740      	adds	r7, #64	; 0x40
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	007a1200 	.word	0x007a1200
 8007434:	00bb8000 	.word	0x00bb8000
 8007438:	58024400 	.word	0x58024400
 800743c:	03d09000 	.word	0x03d09000
 8007440:	003d0900 	.word	0x003d0900

08007444 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007448:	f7fe fe66 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 800744c:	4601      	mov	r1, r0
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4a04      	ldr	r2, [pc, #16]	; (800746c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800745a:	5cd3      	ldrb	r3, [r2, r3]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	58024400 	.word	0x58024400
 800746c:	0800859c 	.word	0x0800859c

08007470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007470:	b480      	push	{r7}
 8007472:	b089      	sub	sp, #36	; 0x24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007478:	4b9d      	ldr	r3, [pc, #628]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007482:	4b9b      	ldr	r3, [pc, #620]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	0b1b      	lsrs	r3, r3, #12
 8007488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800748c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800748e:	4b98      	ldr	r3, [pc, #608]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	091b      	lsrs	r3, r3, #4
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800749a:	4b95      	ldr	r3, [pc, #596]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 810a 	beq.w	80076d2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d05a      	beq.n	800757a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d302      	bcc.n	80074ce <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d078      	beq.n	80075be <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80074cc:	e099      	b.n	8007602 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ce:	4b88      	ldr	r3, [pc, #544]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d02d      	beq.n	8007536 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074da:	4b85      	ldr	r3, [pc, #532]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	4a83      	ldr	r2, [pc, #524]	; (80076f4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007504:	4b7a      	ldr	r3, [pc, #488]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007514:	ed97 6a03 	vldr	s12, [r7, #12]
 8007518:	eddf 5a77 	vldr	s11, [pc, #476]	; 80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800751c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007530:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007534:	e087      	b.n	8007646 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	ee07 3a90 	vmov	s15, r3
 800753c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007540:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007548:	4b69      	ldr	r3, [pc, #420]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007558:	ed97 6a03 	vldr	s12, [r7, #12]
 800755c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800756c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007574:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007578:	e065      	b.n	8007646 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	ee07 3a90 	vmov	s15, r3
 8007580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007584:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758c:	4b58      	ldr	r3, [pc, #352]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759c:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80075a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075bc:	e043      	b.n	8007646 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80075cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d0:	4b47      	ldr	r3, [pc, #284]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80075e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007600:	e021      	b.n	8007646 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	ee07 3a90 	vmov	s15, r3
 8007608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007614:	4b36      	ldr	r3, [pc, #216]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007624:	ed97 6a03 	vldr	s12, [r7, #12]
 8007628:	eddf 5a33 	vldr	s11, [pc, #204]	; 80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800762c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007640:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007644:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007646:	4b2a      	ldr	r3, [pc, #168]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	0a5b      	lsrs	r3, r3, #9
 800764c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800765c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007660:	edd7 6a07 	vldr	s13, [r7, #28]
 8007664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800766c:	ee17 2a90 	vmov	r2, s15
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007674:	4b1e      	ldr	r3, [pc, #120]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800768a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800768e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800769a:	ee17 2a90 	vmov	r2, s15
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80076a2:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	0e1b      	lsrs	r3, r3, #24
 80076a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80076c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c8:	ee17 2a90 	vmov	r2, s15
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076d0:	e008      	b.n	80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	609a      	str	r2, [r3, #8]
}
 80076e4:	bf00      	nop
 80076e6:	3724      	adds	r7, #36	; 0x24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	58024400 	.word	0x58024400
 80076f4:	03d09000 	.word	0x03d09000
 80076f8:	46000000 	.word	0x46000000
 80076fc:	4c742400 	.word	0x4c742400
 8007700:	4a742400 	.word	0x4a742400
 8007704:	4af42400 	.word	0x4af42400

08007708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007708:	b480      	push	{r7}
 800770a:	b089      	sub	sp, #36	; 0x24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007710:	4b9d      	ldr	r3, [pc, #628]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800771a:	4b9b      	ldr	r3, [pc, #620]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	0d1b      	lsrs	r3, r3, #20
 8007720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007724:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007726:	4b98      	ldr	r3, [pc, #608]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	0a1b      	lsrs	r3, r3, #8
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007732:	4b95      	ldr	r3, [pc, #596]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	08db      	lsrs	r3, r3, #3
 8007738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	fb02 f303 	mul.w	r3, r2, r3
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 810a 	beq.w	800796a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d05a      	beq.n	8007812 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800775c:	2b01      	cmp	r3, #1
 800775e:	d302      	bcc.n	8007766 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007760:	2b02      	cmp	r3, #2
 8007762:	d078      	beq.n	8007856 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007764:	e099      	b.n	800789a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007766:	4b88      	ldr	r3, [pc, #544]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d02d      	beq.n	80077ce <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007772:	4b85      	ldr	r3, [pc, #532]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	08db      	lsrs	r3, r3, #3
 8007778:	f003 0303 	and.w	r3, r3, #3
 800777c:	4a83      	ldr	r2, [pc, #524]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800777e:	fa22 f303 	lsr.w	r3, r2, r3
 8007782:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779c:	4b7a      	ldr	r3, [pc, #488]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80077cc:	e087      	b.n	80078de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80077dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e0:	4b69      	ldr	r3, [pc, #420]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007810:	e065      	b.n	80078de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007824:	4b58      	ldr	r3, [pc, #352]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007834:	ed97 6a03 	vldr	s12, [r7, #12]
 8007838:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800783c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007854:	e043      	b.n	80078de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	ee07 3a90 	vmov	s15, r3
 800785c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007860:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800799c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007868:	4b47      	ldr	r3, [pc, #284]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007870:	ee07 3a90 	vmov	s15, r3
 8007874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007878:	ed97 6a03 	vldr	s12, [r7, #12]
 800787c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007894:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007898:	e021      	b.n	80078de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80078a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ac:	4b36      	ldr	r3, [pc, #216]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b4:	ee07 3a90 	vmov	s15, r3
 80078b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80078c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078dc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80078de:	4b2a      	ldr	r3, [pc, #168]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	0a5b      	lsrs	r3, r3, #9
 80078e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e8:	ee07 3a90 	vmov	s15, r3
 80078ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007904:	ee17 2a90 	vmov	r2, s15
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800790c:	4b1e      	ldr	r3, [pc, #120]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	0c1b      	lsrs	r3, r3, #16
 8007912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007926:	edd7 6a07 	vldr	s13, [r7, #28]
 800792a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800792e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007932:	ee17 2a90 	vmov	r2, s15
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800793a:	4b13      	ldr	r3, [pc, #76]	; (8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	0e1b      	lsrs	r3, r3, #24
 8007940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007954:	edd7 6a07 	vldr	s13, [r7, #28]
 8007958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800795c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007960:	ee17 2a90 	vmov	r2, s15
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007968:	e008      	b.n	800797c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	609a      	str	r2, [r3, #8]
}
 800797c:	bf00      	nop
 800797e:	3724      	adds	r7, #36	; 0x24
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	58024400 	.word	0x58024400
 800798c:	03d09000 	.word	0x03d09000
 8007990:	46000000 	.word	0x46000000
 8007994:	4c742400 	.word	0x4c742400
 8007998:	4a742400 	.word	0x4a742400
 800799c:	4af42400 	.word	0x4af42400

080079a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b089      	sub	sp, #36	; 0x24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079a8:	4b9d      	ldr	r3, [pc, #628]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80079b2:	4b9b      	ldr	r3, [pc, #620]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	091b      	lsrs	r3, r3, #4
 80079b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80079be:	4b98      	ldr	r3, [pc, #608]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80079c8:	4b95      	ldr	r3, [pc, #596]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079cc:	08db      	lsrs	r3, r3, #3
 80079ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	fb02 f303 	mul.w	r3, r2, r3
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 810a 	beq.w	8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d05a      	beq.n	8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d302      	bcc.n	80079fc <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d078      	beq.n	8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80079fa:	e099      	b.n	8007b30 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079fc:	4b88      	ldr	r3, [pc, #544]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d02d      	beq.n	8007a64 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a08:	4b85      	ldr	r3, [pc, #532]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	08db      	lsrs	r3, r3, #3
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	4a84      	ldr	r2, [pc, #528]	; (8007c24 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
 8007a18:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	ee07 3a90 	vmov	s15, r3
 8007a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a32:	4b7b      	ldr	r3, [pc, #492]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3a:	ee07 3a90 	vmov	s15, r3
 8007a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a62:	e087      	b.n	8007b74 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a76:	4b6a      	ldr	r3, [pc, #424]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aa6:	e065      	b.n	8007b74 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aba:	4b59      	ldr	r3, [pc, #356]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ace:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aea:	e043      	b.n	8007b74 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afe:	4b48      	ldr	r3, [pc, #288]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b2e:	e021      	b.n	8007b74 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b42:	4b37      	ldr	r3, [pc, #220]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b72:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007b74:	4b2a      	ldr	r3, [pc, #168]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	0a5b      	lsrs	r3, r3, #9
 8007b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9a:	ee17 2a90 	vmov	r2, s15
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007ba2:	4b1f      	ldr	r3, [pc, #124]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	0c1b      	lsrs	r3, r3, #16
 8007ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc8:	ee17 2a90 	vmov	r2, s15
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007bd0:	4b13      	ldr	r3, [pc, #76]	; (8007c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	0e1b      	lsrs	r3, r3, #24
 8007bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf6:	ee17 2a90 	vmov	r2, s15
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007bfe:	e008      	b.n	8007c12 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	609a      	str	r2, [r3, #8]
}
 8007c12:	bf00      	nop
 8007c14:	3724      	adds	r7, #36	; 0x24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	58024400 	.word	0x58024400
 8007c24:	03d09000 	.word	0x03d09000
 8007c28:	46000000 	.word	0x46000000
 8007c2c:	4c742400 	.word	0x4c742400
 8007c30:	4a742400 	.word	0x4a742400
 8007c34:	4af42400 	.word	0x4af42400

08007c38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c46:	4b53      	ldr	r3, [pc, #332]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d101      	bne.n	8007c56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e099      	b.n	8007d8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c56:	4b4f      	ldr	r3, [pc, #316]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a4e      	ldr	r2, [pc, #312]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007c5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c62:	f7f9 fa85 	bl	8001170 <HAL_GetTick>
 8007c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c68:	e008      	b.n	8007c7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c6a:	f7f9 fa81 	bl	8001170 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e086      	b.n	8007d8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c7c:	4b45      	ldr	r3, [pc, #276]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1f0      	bne.n	8007c6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c88:	4b42      	ldr	r3, [pc, #264]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	031b      	lsls	r3, r3, #12
 8007c96:	493f      	ldr	r1, [pc, #252]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	025b      	lsls	r3, r3, #9
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	041b      	lsls	r3, r3, #16
 8007cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	061b      	lsls	r3, r3, #24
 8007cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ccc:	4931      	ldr	r1, [pc, #196]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007cd2:	4b30      	ldr	r3, [pc, #192]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	492d      	ldr	r1, [pc, #180]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ce4:	4b2b      	ldr	r3, [pc, #172]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	f023 0220 	bic.w	r2, r3, #32
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	4928      	ldr	r1, [pc, #160]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cf6:	4b27      	ldr	r3, [pc, #156]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	4a26      	ldr	r2, [pc, #152]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007cfc:	f023 0310 	bic.w	r3, r3, #16
 8007d00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d02:	4b24      	ldr	r3, [pc, #144]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d06:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <RCCEx_PLL2_Config+0x160>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	69d2      	ldr	r2, [r2, #28]
 8007d0e:	00d2      	lsls	r2, r2, #3
 8007d10:	4920      	ldr	r1, [pc, #128]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d16:	4b1f      	ldr	r3, [pc, #124]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	4a1e      	ldr	r2, [pc, #120]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d1c:	f043 0310 	orr.w	r3, r3, #16
 8007d20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d28:	4b1a      	ldr	r3, [pc, #104]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	4a19      	ldr	r2, [pc, #100]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d34:	e00f      	b.n	8007d56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d106      	bne.n	8007d4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d3c:	4b15      	ldr	r3, [pc, #84]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	4a14      	ldr	r2, [pc, #80]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d48:	e005      	b.n	8007d56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	4a11      	ldr	r2, [pc, #68]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a0e      	ldr	r2, [pc, #56]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d62:	f7f9 fa05 	bl	8001170 <HAL_GetTick>
 8007d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d68:	e008      	b.n	8007d7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d6a:	f7f9 fa01 	bl	8001170 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d901      	bls.n	8007d7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e006      	b.n	8007d8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <RCCEx_PLL2_Config+0x15c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d0f0      	beq.n	8007d6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	58024400 	.word	0x58024400
 8007d98:	ffff0007 	.word	0xffff0007

08007d9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007daa:	4b53      	ldr	r3, [pc, #332]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d101      	bne.n	8007dba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e099      	b.n	8007eee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007dba:	4b4f      	ldr	r3, [pc, #316]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a4e      	ldr	r2, [pc, #312]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dc6:	f7f9 f9d3 	bl	8001170 <HAL_GetTick>
 8007dca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dcc:	e008      	b.n	8007de0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007dce:	f7f9 f9cf 	bl	8001170 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d901      	bls.n	8007de0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e086      	b.n	8007eee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007de0:	4b45      	ldr	r3, [pc, #276]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f0      	bne.n	8007dce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007dec:	4b42      	ldr	r3, [pc, #264]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	051b      	lsls	r3, r3, #20
 8007dfa:	493f      	ldr	r1, [pc, #252]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	628b      	str	r3, [r1, #40]	; 0x28
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	025b      	lsls	r3, r3, #9
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	041b      	lsls	r3, r3, #16
 8007e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	061b      	lsls	r3, r3, #24
 8007e2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e30:	4931      	ldr	r1, [pc, #196]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e36:	4b30      	ldr	r3, [pc, #192]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	492d      	ldr	r1, [pc, #180]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e48:	4b2b      	ldr	r3, [pc, #172]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	4928      	ldr	r1, [pc, #160]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e5a:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	4a26      	ldr	r2, [pc, #152]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e66:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e6a:	4b24      	ldr	r3, [pc, #144]	; (8007efc <RCCEx_PLL3_Config+0x160>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	69d2      	ldr	r2, [r2, #28]
 8007e72:	00d2      	lsls	r2, r2, #3
 8007e74:	4920      	ldr	r1, [pc, #128]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e7a:	4b1f      	ldr	r3, [pc, #124]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e98:	e00f      	b.n	8007eba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d106      	bne.n	8007eae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ea0:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	4a14      	ldr	r2, [pc, #80]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007ea6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007eac:	e005      	b.n	8007eba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007eae:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	4a11      	ldr	r2, [pc, #68]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007eba:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a0e      	ldr	r2, [pc, #56]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ec6:	f7f9 f953 	bl	8001170 <HAL_GetTick>
 8007eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ecc:	e008      	b.n	8007ee0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ece:	f7f9 f94f 	bl	8001170 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d901      	bls.n	8007ee0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e006      	b.n	8007eee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ee0:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <RCCEx_PLL3_Config+0x15c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0f0      	beq.n	8007ece <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	58024400 	.word	0x58024400
 8007efc:	ffff0007 	.word	0xffff0007

08007f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e049      	b.n	8007fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d106      	bne.n	8007f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7f9 f80e 	bl	8000f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f000 f934 	bl	80081ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d001      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e019      	b.n	8007ffc <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <HAL_TIM_Base_Start+0x58>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d00b      	beq.n	8007ffa <HAL_TIM_Base_Start+0x4a>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe8:	d007      	beq.n	8007ffa <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0201 	orr.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	00010007 	.word	0x00010007

0800800c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_TIM_ConfigClockSource+0x18>
 8008020:	2302      	movs	r3, #2
 8008022:	e0b7      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x188>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4b57      	ldr	r3, [pc, #348]	; (800819c <HAL_TIM_ConfigClockSource+0x190>)
 8008040:	4013      	ands	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800804a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b70      	cmp	r3, #112	; 0x70
 800805a:	d02e      	beq.n	80080ba <HAL_TIM_ConfigClockSource+0xae>
 800805c:	2b70      	cmp	r3, #112	; 0x70
 800805e:	d812      	bhi.n	8008086 <HAL_TIM_ConfigClockSource+0x7a>
 8008060:	2b30      	cmp	r3, #48	; 0x30
 8008062:	f000 8084 	beq.w	800816e <HAL_TIM_ConfigClockSource+0x162>
 8008066:	2b30      	cmp	r3, #48	; 0x30
 8008068:	d806      	bhi.n	8008078 <HAL_TIM_ConfigClockSource+0x6c>
 800806a:	2b10      	cmp	r3, #16
 800806c:	d07f      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x162>
 800806e:	2b20      	cmp	r3, #32
 8008070:	d07d      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x162>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d07b      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008076:	e084      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008078:	2b50      	cmp	r3, #80	; 0x50
 800807a:	d048      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x102>
 800807c:	2b60      	cmp	r3, #96	; 0x60
 800807e:	d056      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x122>
 8008080:	2b40      	cmp	r3, #64	; 0x40
 8008082:	d064      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008084:	e07d      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008086:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800808a:	d070      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x162>
 800808c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008090:	d809      	bhi.n	80080a6 <HAL_TIM_ConfigClockSource+0x9a>
 8008092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008096:	d027      	beq.n	80080e8 <HAL_TIM_ConfigClockSource+0xdc>
 8008098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800809c:	d067      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x162>
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a2:	d06d      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080a4:	e06d      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80080a6:	4a3e      	ldr	r2, [pc, #248]	; (80081a0 <HAL_TIM_ConfigClockSource+0x194>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d060      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x162>
 80080ac:	4a3d      	ldr	r2, [pc, #244]	; (80081a4 <HAL_TIM_ConfigClockSource+0x198>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d05d      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x162>
 80080b2:	4a3d      	ldr	r2, [pc, #244]	; (80081a8 <HAL_TIM_ConfigClockSource+0x19c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d05a      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x162>
      break;
 80080b8:	e063      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	6899      	ldr	r1, [r3, #8]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f000 f987 	bl	80083dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	609a      	str	r2, [r3, #8]
      break;
 80080e6:	e04c      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	6899      	ldr	r1, [r3, #8]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f000 f970 	bl	80083dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800810a:	609a      	str	r2, [r3, #8]
      break;
 800810c:	e039      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6818      	ldr	r0, [r3, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6859      	ldr	r1, [r3, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	f000 f8e0 	bl	80082e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2150      	movs	r1, #80	; 0x50
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f93a 	bl	80083a0 <TIM_ITRx_SetConfig>
      break;
 800812c:	e029      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	6859      	ldr	r1, [r3, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	461a      	mov	r2, r3
 800813c:	f000 f8ff 	bl	800833e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2160      	movs	r1, #96	; 0x60
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f92a 	bl	80083a0 <TIM_ITRx_SetConfig>
      break;
 800814c:	e019      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6859      	ldr	r1, [r3, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	461a      	mov	r2, r3
 800815c:	f000 f8c0 	bl	80082e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2140      	movs	r1, #64	; 0x40
 8008166:	4618      	mov	r0, r3
 8008168:	f000 f91a 	bl	80083a0 <TIM_ITRx_SetConfig>
      break;
 800816c:	e009      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4619      	mov	r1, r3
 8008178:	4610      	mov	r0, r2
 800817a:	f000 f911 	bl	80083a0 <TIM_ITRx_SetConfig>
      break;
 800817e:	e000      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008180:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	ffceff88 	.word	0xffceff88
 80081a0:	00100030 	.word	0x00100030
 80081a4:	00100040 	.word	0x00100040
 80081a8:	00100020 	.word	0x00100020

080081ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a40      	ldr	r2, [pc, #256]	; (80082c0 <TIM_Base_SetConfig+0x114>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d013      	beq.n	80081ec <TIM_Base_SetConfig+0x40>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ca:	d00f      	beq.n	80081ec <TIM_Base_SetConfig+0x40>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a3d      	ldr	r2, [pc, #244]	; (80082c4 <TIM_Base_SetConfig+0x118>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00b      	beq.n	80081ec <TIM_Base_SetConfig+0x40>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a3c      	ldr	r2, [pc, #240]	; (80082c8 <TIM_Base_SetConfig+0x11c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d007      	beq.n	80081ec <TIM_Base_SetConfig+0x40>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a3b      	ldr	r2, [pc, #236]	; (80082cc <TIM_Base_SetConfig+0x120>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d003      	beq.n	80081ec <TIM_Base_SetConfig+0x40>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a3a      	ldr	r2, [pc, #232]	; (80082d0 <TIM_Base_SetConfig+0x124>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d108      	bne.n	80081fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a2f      	ldr	r2, [pc, #188]	; (80082c0 <TIM_Base_SetConfig+0x114>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d01f      	beq.n	8008246 <TIM_Base_SetConfig+0x9a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800820c:	d01b      	beq.n	8008246 <TIM_Base_SetConfig+0x9a>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a2c      	ldr	r2, [pc, #176]	; (80082c4 <TIM_Base_SetConfig+0x118>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d017      	beq.n	8008246 <TIM_Base_SetConfig+0x9a>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a2b      	ldr	r2, [pc, #172]	; (80082c8 <TIM_Base_SetConfig+0x11c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d013      	beq.n	8008246 <TIM_Base_SetConfig+0x9a>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a2a      	ldr	r2, [pc, #168]	; (80082cc <TIM_Base_SetConfig+0x120>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00f      	beq.n	8008246 <TIM_Base_SetConfig+0x9a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a29      	ldr	r2, [pc, #164]	; (80082d0 <TIM_Base_SetConfig+0x124>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00b      	beq.n	8008246 <TIM_Base_SetConfig+0x9a>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a28      	ldr	r2, [pc, #160]	; (80082d4 <TIM_Base_SetConfig+0x128>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d007      	beq.n	8008246 <TIM_Base_SetConfig+0x9a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a27      	ldr	r2, [pc, #156]	; (80082d8 <TIM_Base_SetConfig+0x12c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d003      	beq.n	8008246 <TIM_Base_SetConfig+0x9a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a26      	ldr	r2, [pc, #152]	; (80082dc <TIM_Base_SetConfig+0x130>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d108      	bne.n	8008258 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800824c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a10      	ldr	r2, [pc, #64]	; (80082c0 <TIM_Base_SetConfig+0x114>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00f      	beq.n	80082a4 <TIM_Base_SetConfig+0xf8>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a12      	ldr	r2, [pc, #72]	; (80082d0 <TIM_Base_SetConfig+0x124>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00b      	beq.n	80082a4 <TIM_Base_SetConfig+0xf8>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a11      	ldr	r2, [pc, #68]	; (80082d4 <TIM_Base_SetConfig+0x128>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d007      	beq.n	80082a4 <TIM_Base_SetConfig+0xf8>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a10      	ldr	r2, [pc, #64]	; (80082d8 <TIM_Base_SetConfig+0x12c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d003      	beq.n	80082a4 <TIM_Base_SetConfig+0xf8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a0f      	ldr	r2, [pc, #60]	; (80082dc <TIM_Base_SetConfig+0x130>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d103      	bne.n	80082ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	615a      	str	r2, [r3, #20]
}
 80082b2:	bf00      	nop
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40000400 	.word	0x40000400
 80082c8:	40000800 	.word	0x40000800
 80082cc:	40000c00 	.word	0x40000c00
 80082d0:	40010400 	.word	0x40010400
 80082d4:	40014000 	.word	0x40014000
 80082d8:	40014400 	.word	0x40014400
 80082dc:	40014800 	.word	0x40014800

080082e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f023 0201 	bic.w	r2, r3, #1
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800830a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f023 030a 	bic.w	r3, r3, #10
 800831c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	621a      	str	r2, [r3, #32]
}
 8008332:	bf00      	nop
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800833e:	b480      	push	{r7}
 8008340:	b087      	sub	sp, #28
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f023 0210 	bic.w	r2, r3, #16
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	031b      	lsls	r3, r3, #12
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800837a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	621a      	str	r2, [r3, #32]
}
 8008392:	bf00      	nop
 8008394:	371c      	adds	r7, #28
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
	...

080083a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <TIM_ITRx_SetConfig+0x38>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	f043 0307 	orr.w	r3, r3, #7
 80083c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	609a      	str	r2, [r3, #8]
}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	ffcfff8f 	.word	0xffcfff8f

080083dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	021a      	lsls	r2, r3, #8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	431a      	orrs	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4313      	orrs	r3, r2
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	609a      	str	r2, [r3, #8]
}
 8008410:	bf00      	nop
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008430:	2302      	movs	r3, #2
 8008432:	e068      	b.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a2e      	ldr	r2, [pc, #184]	; (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d004      	beq.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a2d      	ldr	r2, [pc, #180]	; (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d108      	bne.n	800847a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800846e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008480:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01d      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a6:	d018      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a1b      	ldr	r2, [pc, #108]	; (800851c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d013      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a1a      	ldr	r2, [pc, #104]	; (8008520 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00e      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a18      	ldr	r2, [pc, #96]	; (8008524 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d009      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a13      	ldr	r2, [pc, #76]	; (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d004      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a14      	ldr	r2, [pc, #80]	; (8008528 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d10c      	bne.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40010000 	.word	0x40010000
 8008518:	40010400 	.word	0x40010400
 800851c:	40000400 	.word	0x40000400
 8008520:	40000800 	.word	0x40000800
 8008524:	40000c00 	.word	0x40000c00
 8008528:	40001800 	.word	0x40001800

0800852c <__libc_init_array>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	4e0d      	ldr	r6, [pc, #52]	; (8008564 <__libc_init_array+0x38>)
 8008530:	4c0d      	ldr	r4, [pc, #52]	; (8008568 <__libc_init_array+0x3c>)
 8008532:	1ba4      	subs	r4, r4, r6
 8008534:	10a4      	asrs	r4, r4, #2
 8008536:	2500      	movs	r5, #0
 8008538:	42a5      	cmp	r5, r4
 800853a:	d109      	bne.n	8008550 <__libc_init_array+0x24>
 800853c:	4e0b      	ldr	r6, [pc, #44]	; (800856c <__libc_init_array+0x40>)
 800853e:	4c0c      	ldr	r4, [pc, #48]	; (8008570 <__libc_init_array+0x44>)
 8008540:	f000 f820 	bl	8008584 <_init>
 8008544:	1ba4      	subs	r4, r4, r6
 8008546:	10a4      	asrs	r4, r4, #2
 8008548:	2500      	movs	r5, #0
 800854a:	42a5      	cmp	r5, r4
 800854c:	d105      	bne.n	800855a <__libc_init_array+0x2e>
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008554:	4798      	blx	r3
 8008556:	3501      	adds	r5, #1
 8008558:	e7ee      	b.n	8008538 <__libc_init_array+0xc>
 800855a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800855e:	4798      	blx	r3
 8008560:	3501      	adds	r5, #1
 8008562:	e7f2      	b.n	800854a <__libc_init_array+0x1e>
 8008564:	080085b4 	.word	0x080085b4
 8008568:	080085b4 	.word	0x080085b4
 800856c:	080085b4 	.word	0x080085b4
 8008570:	080085b8 	.word	0x080085b8

08008574 <memset>:
 8008574:	4402      	add	r2, r0
 8008576:	4603      	mov	r3, r0
 8008578:	4293      	cmp	r3, r2
 800857a:	d100      	bne.n	800857e <memset+0xa>
 800857c:	4770      	bx	lr
 800857e:	f803 1b01 	strb.w	r1, [r3], #1
 8008582:	e7f9      	b.n	8008578 <memset+0x4>

08008584 <_init>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr

08008590 <_fini>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr
